package net.authorize.api.controller.test;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import junit.framework.Assert;
import net.authorize.api.contract.v1.ARBGetSubscriptionListOrderFieldEnum;
import net.authorize.api.contract.v1.ARBGetSubscriptionListSearchTypeEnum;
import net.authorize.api.contract.v1.ARBSubscriptionStatusEnum;
import net.authorize.api.contract.v1.ARBSubscriptionUnitEnum;
import net.authorize.api.contract.v1.AUJobTypeEnum;
import net.authorize.api.contract.v1.AccountTypeEnum;
import net.authorize.api.contract.v1.BankAccountTypeEnum;
import net.authorize.api.contract.v1.CardTypeEnum;
import net.authorize.api.contract.v1.CustomerPaymentProfileOrderFieldEnum;
import net.authorize.api.contract.v1.CustomerPaymentProfileSearchTypeEnum;
import net.authorize.api.contract.v1.CustomerTypeEnum;
import net.authorize.api.contract.v1.DeviceActivationEnum;
import net.authorize.api.contract.v1.EcheckTypeEnum;
import net.authorize.api.contract.v1.EncodingType;
import net.authorize.api.contract.v1.EncryptionAlgorithmType;
import net.authorize.api.contract.v1.FDSFilterActionEnum;
import net.authorize.api.contract.v1.MessageTypeEnum;
import net.authorize.api.contract.v1.OperationType;
import net.authorize.api.contract.v1.PaymentMethodEnum;
import net.authorize.api.contract.v1.PermissionsEnum;
import net.authorize.api.contract.v1.SettingNameEnum;
import net.authorize.api.contract.v1.SettlementStateEnum;
import net.authorize.api.contract.v1.SplitTenderStatusEnum;
import net.authorize.api.contract.v1.TransactionStatusEnum;
import net.authorize.api.contract.v1.TransactionTypeEnum;
import net.authorize.api.contract.v1.ValidationModeEnum;
import net.authorize.api.contract.v1.AfdsTransactionEnum;
import net.authorize.api.contract.v1.PaymentMethodsTypeEnum;
import net.authorize.api.contract.v1.TransactionGroupStatusEnum;
import net.authorize.api.contract.v1.TransactionListOrderFieldEnum;

public class AllGeneratedEnumTest extends ApiCoreTestBase {
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		ApiCoreTestBase.setUpBeforeClass();
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		ApiCoreTestBase.tearDownAfterClass();
	}

	@Before
	public void setUp() throws Exception {
		super.setUp();
	}

	@After
	public void tearDown() throws Exception {
		super.tearDown();
	}


    //Generated by java-enum-test on Tue 05/26/2015-11:31:15.62 
    @Test 
    public void allEnumTest() 
    {

        for ( ARBGetSubscriptionListOrderFieldEnum anEnum : ARBGetSubscriptionListOrderFieldEnum.values())
        {
            String aValue = anEnum.value();
            ARBGetSubscriptionListOrderFieldEnum enumFromValue = ARBGetSubscriptionListOrderFieldEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( ARBGetSubscriptionListSearchTypeEnum anEnum : ARBGetSubscriptionListSearchTypeEnum.values())
        {
            String aValue = anEnum.value();
            ARBGetSubscriptionListSearchTypeEnum enumFromValue = ARBGetSubscriptionListSearchTypeEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( ARBSubscriptionStatusEnum anEnum : ARBSubscriptionStatusEnum.values())
        {
            String aValue = anEnum.value();
            ARBSubscriptionStatusEnum enumFromValue = ARBSubscriptionStatusEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( ARBSubscriptionUnitEnum anEnum : ARBSubscriptionUnitEnum.values())
        {
            String aValue = anEnum.value();
            ARBSubscriptionUnitEnum enumFromValue = ARBSubscriptionUnitEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( AccountTypeEnum anEnum : AccountTypeEnum.values())
        {
            String aValue = anEnum.value();
            AccountTypeEnum enumFromValue = AccountTypeEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( BankAccountTypeEnum anEnum : BankAccountTypeEnum.values())
        {
            String aValue = anEnum.value();
            BankAccountTypeEnum enumFromValue = BankAccountTypeEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( CardTypeEnum anEnum : CardTypeEnum.values())
        {
            String aValue = anEnum.value();
            CardTypeEnum enumFromValue = CardTypeEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }
        
        for ( CustomerPaymentProfileOrderFieldEnum anEnum : CustomerPaymentProfileOrderFieldEnum.values())
        {
            String aValue = anEnum.value();
            CustomerPaymentProfileOrderFieldEnum enumFromValue = CustomerPaymentProfileOrderFieldEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( CustomerPaymentProfileSearchTypeEnum anEnum : CustomerPaymentProfileSearchTypeEnum.values())
        {
            String aValue = anEnum.value();
            CustomerPaymentProfileSearchTypeEnum enumFromValue = CustomerPaymentProfileSearchTypeEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( CustomerTypeEnum anEnum : CustomerTypeEnum.values())
        {
            String aValue = anEnum.value();
            CustomerTypeEnum enumFromValue = CustomerTypeEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( DeviceActivationEnum anEnum : DeviceActivationEnum.values())
        {
            String aValue = anEnum.value();
            DeviceActivationEnum enumFromValue = DeviceActivationEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( EcheckTypeEnum anEnum : EcheckTypeEnum.values())
        {
            String aValue = anEnum.value();
            EcheckTypeEnum enumFromValue = EcheckTypeEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( EncodingType anEnum : EncodingType.values())
        {
            String aValue = anEnum.value();
            EncodingType enumFromValue = EncodingType.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( EncryptionAlgorithmType anEnum : EncryptionAlgorithmType.values())
        {
            String aValue = anEnum.value();
            EncryptionAlgorithmType enumFromValue = EncryptionAlgorithmType.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( FDSFilterActionEnum anEnum : FDSFilterActionEnum.values())
        {
            String aValue = anEnum.value();
            FDSFilterActionEnum enumFromValue = FDSFilterActionEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( MessageTypeEnum anEnum : MessageTypeEnum.values())
        {
            String aValue = anEnum.value();
            MessageTypeEnum enumFromValue = MessageTypeEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( OperationType anEnum : OperationType.values())
        {
            String aValue = anEnum.value();
            OperationType enumFromValue = OperationType.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( PaymentMethodEnum anEnum : PaymentMethodEnum.values())
        {
            String aValue = anEnum.value();
            PaymentMethodEnum enumFromValue = PaymentMethodEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( PermissionsEnum anEnum : PermissionsEnum.values())
        {
            String aValue = anEnum.value();
            PermissionsEnum enumFromValue = PermissionsEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( SettingNameEnum anEnum : SettingNameEnum.values())
        {
            String aValue = anEnum.value();
            SettingNameEnum enumFromValue = SettingNameEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( SettlementStateEnum anEnum : SettlementStateEnum.values())
        {
            String aValue = anEnum.value();
            SettlementStateEnum enumFromValue = SettlementStateEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( SplitTenderStatusEnum anEnum : SplitTenderStatusEnum.values())
        {
            String aValue = anEnum.value();
            SplitTenderStatusEnum enumFromValue = SplitTenderStatusEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( TransactionStatusEnum anEnum : TransactionStatusEnum.values())
        {
            String aValue = anEnum.value();
            TransactionStatusEnum enumFromValue = TransactionStatusEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( TransactionTypeEnum anEnum : TransactionTypeEnum.values())
        {
            String aValue = anEnum.value();
            TransactionTypeEnum enumFromValue = TransactionTypeEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( ValidationModeEnum anEnum : ValidationModeEnum.values())
        {
            String aValue = anEnum.value();
            ValidationModeEnum enumFromValue = ValidationModeEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }
        
        for ( AUJobTypeEnum anEnum : AUJobTypeEnum.values())
        {
            String aValue = anEnum.value();
            AUJobTypeEnum enumFromValue = AUJobTypeEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( AfdsTransactionEnum anEnum : AfdsTransactionEnum.values())
        {
            String aValue = anEnum.value();
            AfdsTransactionEnum enumFromValue = AfdsTransactionEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( PaymentMethodsTypeEnum anEnum : PaymentMethodsTypeEnum.values())
        {
            String aValue = anEnum.value();
            PaymentMethodsTypeEnum enumFromValue = PaymentMethodsTypeEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( TransactionGroupStatusEnum anEnum : TransactionGroupStatusEnum.values())
        {
            String aValue = anEnum.value();
            TransactionGroupStatusEnum enumFromValue = TransactionGroupStatusEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }

        for ( TransactionListOrderFieldEnum anEnum : TransactionListOrderFieldEnum.values())
        {
            String aValue = anEnum.value();
            TransactionListOrderFieldEnum enumFromValue = TransactionListOrderFieldEnum.fromValue(aValue);
            Assert.assertEquals(anEnum, enumFromValue);
        }                
    } 

	/*
	private <T extends enum > void XX<T>()
	{
		for ( T anEnum : T.values())
		{
			String unitValue = anEnum.value();
			T unitEnum = T.fromValue(unitValue);
			Assert.assertEquals(anEnum, unitEnum);			
		}
	}
	*/
}
