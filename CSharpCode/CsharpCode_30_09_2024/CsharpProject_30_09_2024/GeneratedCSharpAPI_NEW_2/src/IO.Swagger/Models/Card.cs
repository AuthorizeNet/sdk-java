/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// This object contains the customer&#x27;s credit card payment information.
    /// </summary>
    [DataContract]
    public partial class Card : IEquatable<Card>
    { 
        /// <summary>
        /// The customer&#x27;s credit card number. &lt;br /&gt;&lt;br /&gt; Numeric, 13-16 digits.
        /// </summary>
        /// <value>The customer&#x27;s credit card number. &lt;br /&gt;&lt;br /&gt; Numeric, 13-16 digits.</value>
        [Required]

        [DataMember(Name="number")]
        public string Number { get; set; }

        /// <summary>
        /// Month that the card expires, in MM format.
        /// </summary>
        /// <value>Month that the card expires, in MM format.</value>
        [Required]

        [DataMember(Name="expirationMonth")]
        public string ExpirationMonth { get; set; }

        /// <summary>
        /// Year that the card expires in YYYY format.
        /// </summary>
        /// <value>Year that the card expires in YYYY format.</value>
        [Required]

        [DataMember(Name="expirationYear")]
        public string ExpirationYear { get; set; }

        /// <summary>
        /// Type of credit card. Valid values include&amp;#58; * &#x60;Visa&#x60; * &#x60;MasterCard&#x60; * &#x60;Discover&#x60; * &#x60;JCB&#x60; * &#x60;DinersClub&#x60;
        /// </summary>
        /// <value>Type of credit card. Valid values include&amp;#58; * &#x60;Visa&#x60; * &#x60;MasterCard&#x60; * &#x60;Discover&#x60; * &#x60;JCB&#x60; * &#x60;DinersClub&#x60;</value>

        [DataMember(Name="type")]
        public string Type { get; set; }

        /// <summary>
        /// The three or four digit code on the front or back of the card. &lt;br /&gt;&lt;br /&gt; This field is required if the merchant would like to use the Card Code Verification (CCV) security feature.&lt;br /&gt;&lt;br /&gt; Cardholder information must be stored securely and in accordance with the Payment Card Industry (PCI) Data Security Standard.
        /// </summary>
        /// <value>The three or four digit code on the front or back of the card. &lt;br /&gt;&lt;br /&gt; This field is required if the merchant would like to use the Card Code Verification (CCV) security feature.&lt;br /&gt;&lt;br /&gt; Cardholder information must be stored securely and in accordance with the Payment Card Industry (PCI) Data Security Standard.</value>

        [DataMember(Name="securityCode")]
        public string SecurityCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Card {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  ExpirationMonth: ").Append(ExpirationMonth).Append("\n");
            sb.Append("  ExpirationYear: ").Append(ExpirationYear).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SecurityCode: ").Append(SecurityCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Card)obj);
        }

        /// <summary>
        /// Returns true if Card instances are equal
        /// </summary>
        /// <param name="other">Instance of Card to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Card other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Number == other.Number ||
                    Number != null &&
                    Number.Equals(other.Number)
                ) && 
                (
                    ExpirationMonth == other.ExpirationMonth ||
                    ExpirationMonth != null &&
                    ExpirationMonth.Equals(other.ExpirationMonth)
                ) && 
                (
                    ExpirationYear == other.ExpirationYear ||
                    ExpirationYear != null &&
                    ExpirationYear.Equals(other.ExpirationYear)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    SecurityCode == other.SecurityCode ||
                    SecurityCode != null &&
                    SecurityCode.Equals(other.SecurityCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Number != null)
                    hashCode = hashCode * 59 + Number.GetHashCode();
                    if (ExpirationMonth != null)
                    hashCode = hashCode * 59 + ExpirationMonth.GetHashCode();
                    if (ExpirationYear != null)
                    hashCode = hashCode * 59 + ExpirationYear.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (SecurityCode != null)
                    hashCode = hashCode * 59 + SecurityCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Card left, Card right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Card left, Card right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
