/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BaseAddress : IEquatable<BaseAddress>
    { 
        /// <summary>
        /// Number/letter of the address, and the street name. Required if merchant would like to use the Address Verification Service security feature. Required when using GPN Canada or Worldpay Streamline Processing Platform. &lt;br /&gt;&lt;br /&gt;String, up to 60 characters. Use alphanumeric characters only, without spaces, dashes, or other symbols.
        /// </summary>
        /// <value>Number/letter of the address, and the street name. Required if merchant would like to use the Address Verification Service security feature. Required when using GPN Canada or Worldpay Streamline Processing Platform. &lt;br /&gt;&lt;br /&gt;String, up to 60 characters. Use alphanumeric characters only, without spaces, dashes, or other symbols.</value>
        [Required]

        [DataMember(Name="address1")]
        public string Address1 { get; set; }

        /// <summary>
        /// The state or administrative area. Required only when using a European payment processor. &lt;br /&gt;&lt;br /&gt;String, up to 40 characters. Use alphanumeric characters only, without spaces, dashes, or other symbols. For US states, use the USPS two-character abbreviation for the state.
        /// </summary>
        /// <value>The state or administrative area. Required only when using a European payment processor. &lt;br /&gt;&lt;br /&gt;String, up to 40 characters. Use alphanumeric characters only, without spaces, dashes, or other symbols. For US states, use the USPS two-character abbreviation for the state.</value>

        [DataMember(Name="administrativeArea")]
        public string AdministrativeArea { get; set; }

        /// <summary>
        /// Name of the purchasing company, if any. &lt;br /&gt;&lt;br /&gt; String, up to 50 characters. Use alphanumeric characters only, without spaces, dashes, or other symbols.
        /// </summary>
        /// <value>Name of the purchasing company, if any. &lt;br /&gt;&lt;br /&gt; String, up to 50 characters. Use alphanumeric characters only, without spaces, dashes, or other symbols.</value>

        [DataMember(Name="company")]
        public string Company { get; set; }

        /// <summary>
        /// Country associated with the address. Required only when using a European payment processor. &lt;br /&gt;&lt;br /&gt;String, up to 60 characters. Use alphanumeric characters only, without spaces, dashes, or other symbols. For international payment processors, use the ISO 3166 alpha-3 code for the country.
        /// </summary>
        /// <value>Country associated with the address. Required only when using a European payment processor. &lt;br /&gt;&lt;br /&gt;String, up to 60 characters. Use alphanumeric characters only, without spaces, dashes, or other symbols. For international payment processors, use the ISO 3166 alpha-3 code for the country.</value>

        [DataMember(Name="country")]
        public string Country { get; set; }

        /// <summary>
        /// First name associated with customer&#x27;s address. Required only when using a European payment processor. &lt;br /&gt;&lt;br /&gt;String, up to 50 characters. Use alphanumeric characters only, without spaces, dashes, or other symbols.
        /// </summary>
        /// <value>First name associated with customer&#x27;s address. Required only when using a European payment processor. &lt;br /&gt;&lt;br /&gt;String, up to 50 characters. Use alphanumeric characters only, without spaces, dashes, or other symbols.</value>

        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name associated with customer&#x27;s address. Required only when using a European payment processor. &lt;br /&gt;&lt;br /&gt;String, up to 50 characters. Use alphanumeric characters only, without spaces, dashes, or other symbols.
        /// </summary>
        /// <value>Last name associated with customer&#x27;s address. Required only when using a European payment processor. &lt;br /&gt;&lt;br /&gt;String, up to 50 characters. Use alphanumeric characters only, without spaces, dashes, or other symbols.</value>

        [DataMember(Name="lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// City or town of the address. Required only when using a European payment processor. &lt;br /&gt;&lt;br /&gt;String, up to 40 characters. Use alphanumeric characters only, without spaces, dashes, or other symbols.
        /// </summary>
        /// <value>City or town of the address. Required only when using a European payment processor. &lt;br /&gt;&lt;br /&gt;String, up to 40 characters. Use alphanumeric characters only, without spaces, dashes, or other symbols.</value>

        [DataMember(Name="locality")]
        public string Locality { get; set; }

        /// <summary>
        /// Phone number associated with customer&#x27;s address. &lt;br /&gt;&lt;br /&gt;String, up to 25 characters. For example, (123) 555-1234.
        /// </summary>
        /// <value>Phone number associated with customer&#x27;s address. &lt;br /&gt;&lt;br /&gt;String, up to 25 characters. For example, (123) 555-1234.</value>

        [DataMember(Name="phoneNumber")]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// The postal or ZIP code of the customer&#x27;s billing address. Required if merchant would like to use the Address Verification Service security feature. Required when using GPN Canada or Worldpay Streamline Processing Platform. String, up to 20 characters. Use alphanumeric characters only, without spaces, dashes, or other symbols.
        /// </summary>
        /// <value>The postal or ZIP code of the customer&#x27;s billing address. Required if merchant would like to use the Address Verification Service security feature. Required when using GPN Canada or Worldpay Streamline Processing Platform. String, up to 20 characters. Use alphanumeric characters only, without spaces, dashes, or other symbols.</value>

        [DataMember(Name="postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaseAddress {\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  AdministrativeArea: ").Append(AdministrativeArea).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BaseAddress)obj);
        }

        /// <summary>
        /// Returns true if BaseAddress instances are equal
        /// </summary>
        /// <param name="other">Instance of BaseAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaseAddress other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Address1 == other.Address1 ||
                    Address1 != null &&
                    Address1.Equals(other.Address1)
                ) && 
                (
                    AdministrativeArea == other.AdministrativeArea ||
                    AdministrativeArea != null &&
                    AdministrativeArea.Equals(other.AdministrativeArea)
                ) && 
                (
                    Company == other.Company ||
                    Company != null &&
                    Company.Equals(other.Company)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    Locality == other.Locality ||
                    Locality != null &&
                    Locality.Equals(other.Locality)
                ) && 
                (
                    PhoneNumber == other.PhoneNumber ||
                    PhoneNumber != null &&
                    PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    PostalCode == other.PostalCode ||
                    PostalCode != null &&
                    PostalCode.Equals(other.PostalCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Address1 != null)
                    hashCode = hashCode * 59 + Address1.GetHashCode();
                    if (AdministrativeArea != null)
                    hashCode = hashCode * 59 + AdministrativeArea.GetHashCode();
                    if (Company != null)
                    hashCode = hashCode * 59 + Company.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (Locality != null)
                    hashCode = hashCode * 59 + Locality.GetHashCode();
                    if (PhoneNumber != null)
                    hashCode = hashCode * 59 + PhoneNumber.GetHashCode();
                    if (PostalCode != null)
                    hashCode = hashCode * 59 + PostalCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BaseAddress left, BaseAddress right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BaseAddress left, BaseAddress right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
