/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FraudFilter : IEquatable<FraudFilter>
    { 
        /// <summary>
        /// Name of the fraud filter.
        /// </summary>
        /// <value>Name of the fraud filter.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Setting for the fraud filter. The &#x60;FDSFilterAction&#x60; setting is the most restrictive action setting. &lt;br /&gt; One of&amp;#58; * &#x60;reject&#x60;  * &#x60;decline&#x60; * &#x60;hold&#x60;  * &#x60;authAndHold&#x60;  * &#x60;report&#x60; 
        /// </summary>
        /// <value>Setting for the fraud filter. The &#x60;FDSFilterAction&#x60; setting is the most restrictive action setting. &lt;br /&gt; One of&amp;#58; * &#x60;reject&#x60;  * &#x60;decline&#x60; * &#x60;hold&#x60;  * &#x60;authAndHold&#x60;  * &#x60;report&#x60; </value>

        [DataMember(Name="action")]
        public string Action { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FraudFilter {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FraudFilter)obj);
        }

        /// <summary>
        /// Returns true if FraudFilter instances are equal
        /// </summary>
        /// <param name="other">Instance of FraudFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FraudFilter other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Action == other.Action ||
                    Action != null &&
                    Action.Equals(other.Action)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Action != null)
                    hashCode = hashCode * 59 + Action.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FraudFilter left, FraudFilter right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FraudFilter left, FraudFilter right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
