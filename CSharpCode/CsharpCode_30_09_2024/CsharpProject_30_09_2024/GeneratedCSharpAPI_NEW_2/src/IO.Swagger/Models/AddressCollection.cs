/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AddressCollection : IEquatable<AddressCollection>
    { 
        /// <summary>
        /// Gets or Sets Links
        /// </summary>

        [DataMember(Name="_links")]
        public CollectionLinks Links { get; set; }

        /// <summary>
        /// Gets or Sets Embedded
        /// </summary>

        [DataMember(Name="_embedded")]
        public AddressList Embedded { get; set; }

        /// <summary>
        /// Total number of addresses.
        /// </summary>
        /// <value>Total number of addresses.</value>

        [DataMember(Name="totalAddresses")]
        public int? TotalAddresses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressCollection {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Embedded: ").Append(Embedded).Append("\n");
            sb.Append("  TotalAddresses: ").Append(TotalAddresses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AddressCollection)obj);
        }

        /// <summary>
        /// Returns true if AddressCollection instances are equal
        /// </summary>
        /// <param name="other">Instance of AddressCollection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressCollection other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.Equals(other.Links)
                ) && 
                (
                    Embedded == other.Embedded ||
                    Embedded != null &&
                    Embedded.Equals(other.Embedded)
                ) && 
                (
                    TotalAddresses == other.TotalAddresses ||
                    TotalAddresses != null &&
                    TotalAddresses.Equals(other.TotalAddresses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                    if (Embedded != null)
                    hashCode = hashCode * 59 + Embedded.GetHashCode();
                    if (TotalAddresses != null)
                    hashCode = hashCode * 59 + TotalAddresses.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AddressCollection left, AddressCollection right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AddressCollection left, AddressCollection right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
