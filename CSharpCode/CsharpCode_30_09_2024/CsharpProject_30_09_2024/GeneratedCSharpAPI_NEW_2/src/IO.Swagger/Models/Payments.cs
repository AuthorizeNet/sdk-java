/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Payments : IEquatable<Payments>
    { 
        /// <summary>
        /// The unique identifier of the transaction. This is returned in the orginal transaction response.
        /// </summary>
        /// <value>The unique identifier of the transaction. This is returned in the orginal transaction response.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The time that the original transaction was submitted, in Coordinated Universal Time.
        /// </summary>
        /// <value>The time that the original transaction was submitted, in Coordinated Universal Time.</value>

        [DataMember(Name="submitTimeUTC")]
        public string SubmitTimeUTC { get; set; }

        /// <summary>
        /// Brief description of the status of the transaction. One of the folloiwng -    * &#x60;authorizedPendingCapture&#x60;    * &#x60;capturedPendingSettlement&#x60;    * &#x60;communicationError&#x60;    * &#x60;refundSettledSuccessfully&#x60;    * &#x60;refundPendingSettlement&#x60;    * &#x60;approvedReview&#x60;    * &#x60;declined&#x60;    * &#x60;couldNotVoid&#x60;    * &#x60;expired&#x60;    * &#x60;generalError&#x60;    * &#x60;failedReview&#x60;    * &#x60;settledSuccessfully&#x60;    * &#x60;settlementError&#x60;    * &#x60;underReview&#x60;    * &#x60;voided&#x60;    * &#x60;FDSPendingReview&#x60;    * &#x60;FDSAuthorizedPendingReview&#x60;    * &#x60;returnedItem&#x60;
        /// </summary>
        /// <value>Brief description of the status of the transaction. One of the folloiwng -    * &#x60;authorizedPendingCapture&#x60;    * &#x60;capturedPendingSettlement&#x60;    * &#x60;communicationError&#x60;    * &#x60;refundSettledSuccessfully&#x60;    * &#x60;refundPendingSettlement&#x60;    * &#x60;approvedReview&#x60;    * &#x60;declined&#x60;    * &#x60;couldNotVoid&#x60;    * &#x60;expired&#x60;    * &#x60;generalError&#x60;    * &#x60;failedReview&#x60;    * &#x60;settledSuccessfully&#x60;    * &#x60;settlementError&#x60;    * &#x60;underReview&#x60;    * &#x60;voided&#x60;    * &#x60;FDSPendingReview&#x60;    * &#x60;FDSAuthorizedPendingReview&#x60;    * &#x60;returnedItem&#x60;</value>

        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>

        [DataMember(Name="_links")]
        public SelfLink Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Payments {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SubmitTimeUTC: ").Append(SubmitTimeUTC).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Payments)obj);
        }

        /// <summary>
        /// Returns true if Payments instances are equal
        /// </summary>
        /// <param name="other">Instance of Payments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payments other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    SubmitTimeUTC == other.SubmitTimeUTC ||
                    SubmitTimeUTC != null &&
                    SubmitTimeUTC.Equals(other.SubmitTimeUTC)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.Equals(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (SubmitTimeUTC != null)
                    hashCode = hashCode * 59 + SubmitTimeUTC.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Payments left, Payments right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Payments left, Payments right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
