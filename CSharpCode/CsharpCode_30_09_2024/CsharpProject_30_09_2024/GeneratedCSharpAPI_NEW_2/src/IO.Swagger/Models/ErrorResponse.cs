/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Model for Error Response
    /// </summary>
    [DataContract]
    public partial class ErrorResponse : IEquatable<ErrorResponse>
    { 
        /// <summary>
        /// Describes the error condition.
        /// </summary>
        /// <value>Describes the error condition.</value>
        [Required]

        [DataMember(Name="message")]
        public string Message { get; set; }

        /// <summary>
        /// This is an enum field that describes the business errors returned by the server. The client can use this field to interpret errors returned by the server. 
        /// </summary>
        /// <value>This is an enum field that describes the business errors returned by the server. The client can use this field to interpret errors returned by the server. </value>
        [Required]

        [DataMember(Name="reason")]
        public string Reason { get; set; }

        /// <summary>
        /// Contains a URL link to general online documentation for this error.
        /// </summary>
        /// <value>Contains a URL link to general online documentation for this error.</value>

        [DataMember(Name="informationLink")]
        public string InformationLink { get; set; }

        /// <summary>
        /// Gets or Sets CorrelationId
        /// </summary>

        [DataMember(Name="correlationId")]
        public Guid? CorrelationId { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>

        [DataMember(Name="details")]
        public List<ErrorDetails> Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ErrorResponse {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  InformationLink: ").Append(InformationLink).Append("\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ErrorResponse)obj);
        }

        /// <summary>
        /// Returns true if ErrorResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ErrorResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ErrorResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                ) && 
                (
                    Reason == other.Reason ||
                    Reason != null &&
                    Reason.Equals(other.Reason)
                ) && 
                (
                    InformationLink == other.InformationLink ||
                    InformationLink != null &&
                    InformationLink.Equals(other.InformationLink)
                ) && 
                (
                    CorrelationId == other.CorrelationId ||
                    CorrelationId != null &&
                    CorrelationId.Equals(other.CorrelationId)
                ) && 
                (
                    Details == other.Details ||
                    Details != null &&
                    Details.SequenceEqual(other.Details)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                    if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                    if (InformationLink != null)
                    hashCode = hashCode * 59 + InformationLink.GetHashCode();
                    if (CorrelationId != null)
                    hashCode = hashCode * 59 + CorrelationId.GetHashCode();
                    if (Details != null)
                    hashCode = hashCode * 59 + Details.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ErrorResponse left, ErrorResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ErrorResponse left, ErrorResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
