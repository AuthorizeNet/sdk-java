/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AmountDetail : IEquatable<AmountDetail>
    { 
        /// <summary>
        /// This is the total amount of the payment and must include tax, shipping, tips, and any other charges. &lt;br /&gt;&lt;br /&gt; Decimal, up to 15 digits with a decimal point. Do not use currency symbols. For example, 8.95. 
        /// </summary>
        /// <value>This is the total amount of the payment and must include tax, shipping, tips, and any other charges. &lt;br /&gt;&lt;br /&gt; Decimal, up to 15 digits with a decimal point. Do not use currency symbols. For example, 8.95. </value>
        [Required]

        [DataMember(Name="totalAmount")]
        public string TotalAmount { get; set; }

        /// <summary>
        /// Currency of the transaction.
        /// </summary>
        /// <value>Currency of the transaction.</value>

        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Amount of duty. The total transaction amount must include this value.
        /// </summary>
        /// <value>Amount of duty. The total transaction amount must include this value.</value>

        [DataMember(Name="dutyAmount")]
        public string DutyAmount { get; set; }

        /// <summary>
        /// Amount of tax. The total transaction amount must include this value.
        /// </summary>
        /// <value>Amount of tax. The total transaction amount must include this value.</value>

        [DataMember(Name="taxAmount")]
        public string TaxAmount { get; set; }

        /// <summary>
        /// Amount of the shipping charges. The total transaction amount must include this value.
        /// </summary>
        /// <value>Amount of the shipping charges. The total transaction amount must include this value.</value>

        [DataMember(Name="freightAmount")]
        public string FreightAmount { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizedAmount
        /// </summary>

        [DataMember(Name="authorizedAmount")]
        public string AuthorizedAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AmountDetail {\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  DutyAmount: ").Append(DutyAmount).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  FreightAmount: ").Append(FreightAmount).Append("\n");
            sb.Append("  AuthorizedAmount: ").Append(AuthorizedAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AmountDetail)obj);
        }

        /// <summary>
        /// Returns true if AmountDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of AmountDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AmountDetail other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TotalAmount == other.TotalAmount ||
                    TotalAmount != null &&
                    TotalAmount.Equals(other.TotalAmount)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    DutyAmount == other.DutyAmount ||
                    DutyAmount != null &&
                    DutyAmount.Equals(other.DutyAmount)
                ) && 
                (
                    TaxAmount == other.TaxAmount ||
                    TaxAmount != null &&
                    TaxAmount.Equals(other.TaxAmount)
                ) && 
                (
                    FreightAmount == other.FreightAmount ||
                    FreightAmount != null &&
                    FreightAmount.Equals(other.FreightAmount)
                ) && 
                (
                    AuthorizedAmount == other.AuthorizedAmount ||
                    AuthorizedAmount != null &&
                    AuthorizedAmount.Equals(other.AuthorizedAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TotalAmount != null)
                    hashCode = hashCode * 59 + TotalAmount.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (DutyAmount != null)
                    hashCode = hashCode * 59 + DutyAmount.GetHashCode();
                    if (TaxAmount != null)
                    hashCode = hashCode * 59 + TaxAmount.GetHashCode();
                    if (FreightAmount != null)
                    hashCode = hashCode * 59 + FreightAmount.GetHashCode();
                    if (AuthorizedAmount != null)
                    hashCode = hashCode * 59 + AuthorizedAmount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AmountDetail left, AmountDetail right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AmountDetail left, AmountDetail right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
