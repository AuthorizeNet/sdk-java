/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Model for CaptureRequest
    /// </summary>
    [DataContract]
    public partial class CreditRequest : IEquatable<CreditRequest>
    { 
        /// <summary>
        /// Gets or Sets PaymentInformation
        /// </summary>

        [DataMember(Name="paymentInformation")]
        public PaymentInformation PaymentInformation { get; set; }

        /// <summary>
        /// Gets or Sets OrderInformation
        /// </summary>

        [DataMember(Name="orderInformation")]
        public OrderInformation OrderInformation { get; set; }

        /// <summary>
        /// Gets or Sets BuyerInformation
        /// </summary>

        [DataMember(Name="buyerInformation")]
        public BuyerInformation BuyerInformation { get; set; }

        /// <summary>
        /// Gets or Sets DeviceInformation
        /// </summary>

        [DataMember(Name="deviceInformation")]
        public DeviceInformation DeviceInformation { get; set; }

        /// <summary>
        /// Gets or Sets PointOfSaleInformation
        /// </summary>

        [DataMember(Name="pointOfSaleInformation")]
        public PointOfSaleInformation PointOfSaleInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditRequest {\n");
            sb.Append("  PaymentInformation: ").Append(PaymentInformation).Append("\n");
            sb.Append("  OrderInformation: ").Append(OrderInformation).Append("\n");
            sb.Append("  BuyerInformation: ").Append(BuyerInformation).Append("\n");
            sb.Append("  DeviceInformation: ").Append(DeviceInformation).Append("\n");
            sb.Append("  PointOfSaleInformation: ").Append(PointOfSaleInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreditRequest)obj);
        }

        /// <summary>
        /// Returns true if CreditRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreditRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PaymentInformation == other.PaymentInformation ||
                    PaymentInformation != null &&
                    PaymentInformation.Equals(other.PaymentInformation)
                ) && 
                (
                    OrderInformation == other.OrderInformation ||
                    OrderInformation != null &&
                    OrderInformation.Equals(other.OrderInformation)
                ) && 
                (
                    BuyerInformation == other.BuyerInformation ||
                    BuyerInformation != null &&
                    BuyerInformation.Equals(other.BuyerInformation)
                ) && 
                (
                    DeviceInformation == other.DeviceInformation ||
                    DeviceInformation != null &&
                    DeviceInformation.Equals(other.DeviceInformation)
                ) && 
                (
                    PointOfSaleInformation == other.PointOfSaleInformation ||
                    PointOfSaleInformation != null &&
                    PointOfSaleInformation.Equals(other.PointOfSaleInformation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PaymentInformation != null)
                    hashCode = hashCode * 59 + PaymentInformation.GetHashCode();
                    if (OrderInformation != null)
                    hashCode = hashCode * 59 + OrderInformation.GetHashCode();
                    if (BuyerInformation != null)
                    hashCode = hashCode * 59 + BuyerInformation.GetHashCode();
                    if (DeviceInformation != null)
                    hashCode = hashCode * 59 + DeviceInformation.GetHashCode();
                    if (PointOfSaleInformation != null)
                    hashCode = hashCode * 59 + PointOfSaleInformation.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreditRequest left, CreditRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreditRequest left, CreditRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
