/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Items : IEquatable<Items>
    { 
        /// <summary>
        /// Item identification. 31-character maximum.
        /// </summary>
        /// <value>Item identification. 31-character maximum.</value>
        [Required]

        [DataMember(Name="productCode")]
        public string ProductCode { get; set; }

        /// <summary>
        /// A short description of the item. 31-character maximum.
        /// </summary>
        /// <value>A short description of the item. 31-character maximum.</value>
        [Required]

        [DataMember(Name="productName")]
        public string ProductName { get; set; }

        /// <summary>
        /// The number of items sold. Up to a maximum of four decimal places.
        /// </summary>
        /// <value>The number of items sold. Up to a maximum of four decimal places.</value>

        [DataMember(Name="quantity")]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// Cost of an item per unit, excluding tax, freight, and duty. Up to a maximum of 2 decimal places.
        /// </summary>
        /// <value>Cost of an item per unit, excluding tax, freight, and duty. Up to a maximum of 2 decimal places.</value>

        [DataMember(Name="unitPrice")]
        public string UnitPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Items {\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Items)obj);
        }

        /// <summary>
        /// Returns true if Items instances are equal
        /// </summary>
        /// <param name="other">Instance of Items to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Items other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ProductCode == other.ProductCode ||
                    ProductCode != null &&
                    ProductCode.Equals(other.ProductCode)
                ) && 
                (
                    ProductName == other.ProductName ||
                    ProductName != null &&
                    ProductName.Equals(other.ProductName)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    UnitPrice == other.UnitPrice ||
                    UnitPrice != null &&
                    UnitPrice.Equals(other.UnitPrice)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ProductCode != null)
                    hashCode = hashCode * 59 + ProductCode.GetHashCode();
                    if (ProductName != null)
                    hashCode = hashCode * 59 + ProductName.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (UnitPrice != null)
                    hashCode = hashCode * 59 + UnitPrice.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Items left, Items right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Items left, Items right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
