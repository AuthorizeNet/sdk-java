/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BuyerInformation : IEquatable<BuyerInformation>
    { 
        /// <summary>
        /// The unique customer ID used to represent the customer associated with the transaction. If you use customer IDs, your solution should generate the customer ID and send it with your transaction requests. Authorize.Net does not generate customer IDs.Use alphanumeric characters only, without spaces, dashes, or other symbols.
        /// </summary>
        /// <value>The unique customer ID used to represent the customer associated with the transaction. If you use customer IDs, your solution should generate the customer ID and send it with your transaction requests. Authorize.Net does not generate customer IDs.Use alphanumeric characters only, without spaces, dashes, or other symbols.</value>

        [DataMember(Name="merchantCustomerId")]
        public string MerchantCustomerId { get; set; }

        /// <summary>
        /// Type of customer. Valid values are &#x60;individual&#x60; or &#x60;business&#x60;.
        /// </summary>
        /// <value>Type of customer. Valid values are &#x60;individual&#x60; or &#x60;business&#x60;.</value>

        [DataMember(Name="customerType")]
        public string CustomerType { get; set; }

        /// <summary>
        /// The customer&#x27;s valid email address. For example, janedoe@example.com.
        /// </summary>
        /// <value>The customer&#x27;s valid email address. For example, janedoe@example.com.</value>

        [DataMember(Name="email")]
        public string Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuyerInformation {\n");
            sb.Append("  MerchantCustomerId: ").Append(MerchantCustomerId).Append("\n");
            sb.Append("  CustomerType: ").Append(CustomerType).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BuyerInformation)obj);
        }

        /// <summary>
        /// Returns true if BuyerInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of BuyerInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuyerInformation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MerchantCustomerId == other.MerchantCustomerId ||
                    MerchantCustomerId != null &&
                    MerchantCustomerId.Equals(other.MerchantCustomerId)
                ) && 
                (
                    CustomerType == other.CustomerType ||
                    CustomerType != null &&
                    CustomerType.Equals(other.CustomerType)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MerchantCustomerId != null)
                    hashCode = hashCode * 59 + MerchantCustomerId.GetHashCode();
                    if (CustomerType != null)
                    hashCode = hashCode * 59 + CustomerType.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BuyerInformation left, BuyerInformation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BuyerInformation left, BuyerInformation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
