/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Model for PaymentCollection
    /// </summary>
    [DataContract]
    public partial class PaymentCollection : IEquatable<PaymentCollection>
    { 
        /// <summary>
        /// Gets or Sets Link
        /// </summary>

        [DataMember(Name="_link")]
        public CollectionLinks Link { get; set; }

        /// <summary>
        /// Gets or Sets Embedded
        /// </summary>

        [DataMember(Name="_embedded")]
        public PaymentsList Embedded { get; set; }

        /// <summary>
        /// Total number of transactions returned.
        /// </summary>
        /// <value>Total number of transactions returned.</value>

        [DataMember(Name="totalTransactions")]
        public int? TotalTransactions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentCollection {\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Embedded: ").Append(Embedded).Append("\n");
            sb.Append("  TotalTransactions: ").Append(TotalTransactions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaymentCollection)obj);
        }

        /// <summary>
        /// Returns true if PaymentCollection instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentCollection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentCollection other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Link == other.Link ||
                    Link != null &&
                    Link.Equals(other.Link)
                ) && 
                (
                    Embedded == other.Embedded ||
                    Embedded != null &&
                    Embedded.Equals(other.Embedded)
                ) && 
                (
                    TotalTransactions == other.TotalTransactions ||
                    TotalTransactions != null &&
                    TotalTransactions.Equals(other.TotalTransactions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Link != null)
                    hashCode = hashCode * 59 + Link.GetHashCode();
                    if (Embedded != null)
                    hashCode = hashCode * 59 + Embedded.GetHashCode();
                    if (TotalTransactions != null)
                    hashCode = hashCode * 59 + TotalTransactions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PaymentCollection left, PaymentCollection right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentCollection left, PaymentCollection right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
