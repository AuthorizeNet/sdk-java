/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ConsumerAuthenticationInformation : IEquatable<ConsumerAuthenticationInformation>
    { 
        /// <summary>
        /// The Cardholder Authentication Verification Value (CAVV) for a Visa transaction, or Accountholder Authentication Value (AVV)/ Universal Cardholder Authentication Field indicator (UCAF) for a Mastercard transaction. The cardholder authentication process generates the CAVV, AAV, or UCAF value prior to submitting the transaction. Invalid values will result in Response Reason Code 117. This field is currently supported through Chase Paymentech, FDMS Nashville, Global Payments and TSYS.
        /// </summary>
        /// <value>The Cardholder Authentication Verification Value (CAVV) for a Visa transaction, or Accountholder Authentication Value (AVV)/ Universal Cardholder Authentication Field indicator (UCAF) for a Mastercard transaction. The cardholder authentication process generates the CAVV, AAV, or UCAF value prior to submitting the transaction. Invalid values will result in Response Reason Code 117. This field is currently supported through Chase Paymentech, FDMS Nashville, Global Payments and TSYS.</value>

        [DataMember(Name="cavv")]
        public string Cavv { get; set; }

        /// <summary>
        /// The Electronic Commerce Indicator (ECI) value for a Visa transaction, or the Universal Cardholder Authentication Field indicator (UCAF) for a Mastercard transaction. The cardholder authentication process generates the ECI or UCAF value prior to submitting the transaction.  Required only for payment requests processed through 3D Secure cardholder authentication programs, such as Visa Secure or SecureCode.  Invalid values will result in Response Reason Code 116.  This field is currently supported through Chase Paymentech, FDMS Nashville, Global Payments and TSYS.
        /// </summary>
        /// <value>The Electronic Commerce Indicator (ECI) value for a Visa transaction, or the Universal Cardholder Authentication Field indicator (UCAF) for a Mastercard transaction. The cardholder authentication process generates the ECI or UCAF value prior to submitting the transaction.  Required only for payment requests processed through 3D Secure cardholder authentication programs, such as Visa Secure or SecureCode.  Invalid values will result in Response Reason Code 116.  This field is currently supported through Chase Paymentech, FDMS Nashville, Global Payments and TSYS.</value>

        [DataMember(Name="eciRaw")]
        public string EciRaw { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConsumerAuthenticationInformation {\n");
            sb.Append("  Cavv: ").Append(Cavv).Append("\n");
            sb.Append("  EciRaw: ").Append(EciRaw).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ConsumerAuthenticationInformation)obj);
        }

        /// <summary>
        /// Returns true if ConsumerAuthenticationInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of ConsumerAuthenticationInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsumerAuthenticationInformation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Cavv == other.Cavv ||
                    Cavv != null &&
                    Cavv.Equals(other.Cavv)
                ) && 
                (
                    EciRaw == other.EciRaw ||
                    EciRaw != null &&
                    EciRaw.Equals(other.EciRaw)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Cavv != null)
                    hashCode = hashCode * 59 + Cavv.GetHashCode();
                    if (EciRaw != null)
                    hashCode = hashCode * 59 + EciRaw.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ConsumerAuthenticationInformation left, ConsumerAuthenticationInformation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ConsumerAuthenticationInformation left, ConsumerAuthenticationInformation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
