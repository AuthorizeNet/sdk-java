/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrderInformation : IEquatable<OrderInformation>
    { 
        /// <summary>
        /// Gets or Sets AmountDetails
        /// </summary>
        [Required]

        [DataMember(Name="amountDetails")]
        public AmountDetail AmountDetails { get; set; }

        /// <summary>
        /// billto address definition
        /// </summary>
        /// <value>billto address definition</value>

        [DataMember(Name="billTo")]
        public AllOforderInformationBillTo BillTo { get; set; }

        /// <summary>
        /// shipTo address definition
        /// </summary>
        /// <value>shipTo address definition</value>

        [DataMember(Name="shipTo")]
        public AllOforderInformationShipTo ShipTo { get; set; }

        /// <summary>
        /// Gets or Sets LineItems
        /// </summary>

        [DataMember(Name="lineItems")]
        public List<Items> LineItems { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceDetails
        /// </summary>

        [DataMember(Name="invoiceDetails")]
        public InvoiceDetails InvoiceDetails { get; set; }

        /// <summary>
        /// Contains information about the order.
        /// </summary>
        /// <value>Contains information about the order.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderInformation {\n");
            sb.Append("  AmountDetails: ").Append(AmountDetails).Append("\n");
            sb.Append("  BillTo: ").Append(BillTo).Append("\n");
            sb.Append("  ShipTo: ").Append(ShipTo).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  InvoiceDetails: ").Append(InvoiceDetails).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderInformation)obj);
        }

        /// <summary>
        /// Returns true if OrderInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderInformation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AmountDetails == other.AmountDetails ||
                    AmountDetails != null &&
                    AmountDetails.Equals(other.AmountDetails)
                ) && 
                (
                    BillTo == other.BillTo ||
                    BillTo != null &&
                    BillTo.Equals(other.BillTo)
                ) && 
                (
                    ShipTo == other.ShipTo ||
                    ShipTo != null &&
                    ShipTo.Equals(other.ShipTo)
                ) && 
                (
                    LineItems == other.LineItems ||
                    LineItems != null &&
                    LineItems.SequenceEqual(other.LineItems)
                ) && 
                (
                    InvoiceDetails == other.InvoiceDetails ||
                    InvoiceDetails != null &&
                    InvoiceDetails.Equals(other.InvoiceDetails)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AmountDetails != null)
                    hashCode = hashCode * 59 + AmountDetails.GetHashCode();
                    if (BillTo != null)
                    hashCode = hashCode * 59 + BillTo.GetHashCode();
                    if (ShipTo != null)
                    hashCode = hashCode * 59 + ShipTo.GetHashCode();
                    if (LineItems != null)
                    hashCode = hashCode * 59 + LineItems.GetHashCode();
                    if (InvoiceDetails != null)
                    hashCode = hashCode * 59 + InvoiceDetails.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderInformation left, OrderInformation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderInformation left, OrderInformation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
