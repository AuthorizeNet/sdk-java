/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Addresses : IEquatable<Addresses>
    { 
        /// <summary>
        /// Unique identifier of the address.
        /// </summary>
        /// <value>Unique identifier of the address.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// If the address is set as the default address for the profile, the value of this element is &#x60;true&#x60;.
        /// </summary>
        /// <value>If the address is set as the default address for the profile, the value of this element is &#x60;true&#x60;.</value>

        [DataMember(Name="default")]
        public bool? _Default { get; set; }

        /// <summary>
        /// First name of the customer associated with the address.
        /// </summary>
        /// <value>First name of the customer associated with the address.</value>

        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name of the customer associated with the address.
        /// </summary>
        /// <value>Last name of the customer associated with the address.</value>

        [DataMember(Name="lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>

        [DataMember(Name="_links")]
        public AddressLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Addresses {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  _Default: ").Append(_Default).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Addresses)obj);
        }

        /// <summary>
        /// Returns true if Addresses instances are equal
        /// </summary>
        /// <param name="other">Instance of Addresses to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Addresses other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    _Default == other._Default ||
                    _Default != null &&
                    _Default.Equals(other._Default)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.Equals(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (_Default != null)
                    hashCode = hashCode * 59 + _Default.GetHashCode();
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Addresses left, Addresses right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Addresses left, Addresses right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
