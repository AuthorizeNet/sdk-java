/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Contains information about the method of payment.
    /// </summary>
    [DataContract]
    public partial class PaymentMethod : IEquatable<PaymentMethod>
    { 
        /// <summary>
        /// Unique identifier for the &#x60;paymentMethod&#x60; object in this transaction.
        /// </summary>
        /// <value>Unique identifier for the &#x60;paymentMethod&#x60; object in this transaction.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Setting this boolean to &#x60;true&#x60; marks this payment method as the default for this customer.
        /// </summary>
        /// <value>Setting this boolean to &#x60;true&#x60; marks this payment method as the default for this customer.</value>

        [DataMember(Name="default")]
        public bool? _Default { get; set; }

        /// <summary>
        /// Gets or Sets BillTo
        /// </summary>

        [DataMember(Name="billTo")]
        public BaseAddress BillTo { get; set; }

        /// <summary>
        /// Gets or Sets PaymentInformation
        /// </summary>

        [DataMember(Name="paymentInformation")]
        public PaymentInformation PaymentInformation { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>

        [DataMember(Name="_links")]
        public PaymentMethodLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentMethod {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  _Default: ").Append(_Default).Append("\n");
            sb.Append("  BillTo: ").Append(BillTo).Append("\n");
            sb.Append("  PaymentInformation: ").Append(PaymentInformation).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaymentMethod)obj);
        }

        /// <summary>
        /// Returns true if PaymentMethod instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentMethod other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    _Default == other._Default ||
                    _Default != null &&
                    _Default.Equals(other._Default)
                ) && 
                (
                    BillTo == other.BillTo ||
                    BillTo != null &&
                    BillTo.Equals(other.BillTo)
                ) && 
                (
                    PaymentInformation == other.PaymentInformation ||
                    PaymentInformation != null &&
                    PaymentInformation.Equals(other.PaymentInformation)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.Equals(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (_Default != null)
                    hashCode = hashCode * 59 + _Default.GetHashCode();
                    if (BillTo != null)
                    hashCode = hashCode * 59 + BillTo.GetHashCode();
                    if (PaymentInformation != null)
                    hashCode = hashCode * 59 + PaymentInformation.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PaymentMethod left, PaymentMethod right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentMethod left, PaymentMethod right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
