/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class WebhooksWebhooksApiController : ControllerBase
    { 
        /// <summary>
        /// Create A Webhook
        /// </summary>
        /// <remarks>Enroll in one or more type of event notification.</remarks>
        /// <param name="body">The payload which contains the details for enrolling in one or more webhooks.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Invalid/Missing Data or Limit Reached</response>
        /// <response code="500">System Error.</response>
        /// <response code="0">Unexpected Error.</response>
        [HttpPost]
        [Route("//v1/webhooks")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateWebhook")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetWebhookResponse), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid/Missing Data or Limit Reached")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "System Error.")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Unexpected Error.")]
        public virtual IActionResult CreateWebhook([FromBody]CreateWebhookBody body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetWebhookResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\r\n  \"webhookId\" : \"webhookId\",\r\n  \"_links\" : {\r\n    \"self\" : {\r\n      \"method\" : \"method\",\r\n      \"href\" : \"href\",\r\n      \"title\" : \"title\"\r\n    }\r\n  },\r\n  \"name\" : \"name\",\r\n  \"eventTypes\" : [ \"eventTypes\", \"eventTypes\" ],\r\n  \"url\" : \"url\",\r\n  \"status\" : \"status\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<GetWebhookResponse>(exampleJson)
                        : default(GetWebhookResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete A Webhook
        /// </summary>
        /// <remarks>Delete an existing Webhook.</remarks>
        /// <param name="webhookId">Unique identifier of the webhook. The identifier was sent in the response to the webhook request.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Invalid Data </response>
        /// <response code="404">Not Found</response>
        /// <response code="500">System Error.</response>
        /// <response code="0">Unexpected Error.</response>
        [HttpDelete]
        [Route("//v1/webhooks/{webhookId}")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteWebhook")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Data ")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "System Error.")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Unexpected Error.")]
        public virtual IActionResult DeleteWebhook([FromRoute][Required]string webhookId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get a Webhook
        /// </summary>
        /// <remarks>Retrieve THE details of an existing Webhook.</remarks>
        /// <param name="webhookId">Unique identifier of the webhook. The identifier was sent in the response to the webhook request.</param>
        /// <response code="200">OK</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">System Error.</response>
        /// <response code="0">Unexpected Error.</response>
        [HttpGet]
        [Route("//v1/webhooks/{webhookId}")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetWebhook")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetWebhookResponse), description: "OK")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "System Error.")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Unexpected Error.")]
        public virtual IActionResult GetWebhook([FromRoute][Required]string webhookId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetWebhookResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\r\n  \"webhookId\" : \"webhookId\",\r\n  \"_links\" : {\r\n    \"self\" : {\r\n      \"method\" : \"method\",\r\n      \"href\" : \"href\",\r\n      \"title\" : \"title\"\r\n    }\r\n  },\r\n  \"name\" : \"name\",\r\n  \"eventTypes\" : [ \"eventTypes\", \"eventTypes\" ],\r\n  \"url\" : \"url\",\r\n  \"status\" : \"status\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<GetWebhookResponse>(exampleJson)
                        : default(GetWebhookResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List My Webhooks
        /// </summary>
        /// <remarks>Retrieve details of all existing Webhooks for this account.</remarks>
        /// <response code="200">OK</response>
        /// <response code="500">System Error.</response>
        /// <response code="0">Unexpected Error.</response>
        [HttpGet]
        [Route("//v1/webhooks")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetWebhooks")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<GetWebhookResponse>), description: "OK")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "System Error.")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Unexpected Error.")]
        public virtual IActionResult GetWebhooks()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<GetWebhookResponse>));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"webhookId\" : \"webhookId\",\r\n  \"_links\" : {\r\n    \"self\" : {\r\n      \"method\" : \"method\",\r\n      \"href\" : \"href\",\r\n      \"title\" : \"title\"\r\n    }\r\n  },\r\n  \"name\" : \"name\",\r\n  \"eventTypes\" : [ \"eventTypes\", \"eventTypes\" ],\r\n  \"url\" : \"url\",\r\n  \"status\" : \"status\"\r\n}, {\r\n  \"webhookId\" : \"webhookId\",\r\n  \"_links\" : {\r\n    \"self\" : {\r\n      \"method\" : \"method\",\r\n      \"href\" : \"href\",\r\n      \"title\" : \"title\"\r\n    }\r\n  },\r\n  \"name\" : \"name\",\r\n  \"eventTypes\" : [ \"eventTypes\", \"eventTypes\" ],\r\n  \"url\" : \"url\",\r\n  \"status\" : \"status\"\r\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<GetWebhookResponse>>(exampleJson)
                        : default(List<GetWebhookResponse>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update A Webhook
        /// </summary>
        /// <remarks>Update the details of an existing webhook.</remarks>
        /// <param name="body">Contains the details to be updated.</param>
        /// <param name="webhookId">Unique identifier of the webhook. The identifier was sent in the response to the webhook request.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Invalid/Missing Data or Limit Reached</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">System Error.</response>
        /// <response code="0">Unexpected Error.</response>
        [HttpPut]
        [Route("//v1/webhooks/{webhookId}")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateWebhook")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetWebhookResponse), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid/Missing Data or Limit Reached")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "System Error.")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Unexpected Error.")]
        public virtual IActionResult UpdateWebhook([FromBody]CreateWebhookBody body, [FromRoute][Required]string webhookId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetWebhookResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\r\n  \"webhookId\" : \"webhookId\",\r\n  \"_links\" : {\r\n    \"self\" : {\r\n      \"method\" : \"method\",\r\n      \"href\" : \"href\",\r\n      \"title\" : \"title\"\r\n    }\r\n  },\r\n  \"name\" : \"name\",\r\n  \"eventTypes\" : [ \"eventTypes\", \"eventTypes\" ],\r\n  \"url\" : \"url\",\r\n  \"status\" : \"status\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<GetWebhookResponse>(exampleJson)
                        : default(GetWebhookResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
