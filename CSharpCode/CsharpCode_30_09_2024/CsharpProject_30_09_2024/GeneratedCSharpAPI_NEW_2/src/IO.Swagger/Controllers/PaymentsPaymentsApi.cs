/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PaymentsPaymentsApiController : ControllerBase
    { 
        /// <summary>
        /// Create a Payment Transaction
        /// </summary>
        /// <remarks>Create a payment transaction. By default, this operation **authorizes and captures** the transaction. To only **authorize** it, set &#x60;paymentRequest.processingInformation.capture&#x60; to &#x60;false&#x60;.</remarks>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPost]
        [Route("//v1/payments/")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreatePayment")]
        [SwaggerResponse(statusCode: 200, type: typeof(Payment), description: "OK")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        public virtual IActionResult CreatePayment([FromBody]PaymentRequest body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Payment));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\r\n  \"submitTimeUTC\" : \"submitTimeUTC\",\r\n  \"clientReferenceInformation\" : {\r\n    \"code\" : \"code\"\r\n  },\r\n  \"processorInformation\" : {\r\n    \"approvalCode\" : \"approvalCode\",\r\n    \"cardVerification\" : {\r\n      \"resultCode\" : \"resultCode\"\r\n    },\r\n    \"consumerAuthenticationResponse\" : {\r\n      \"code\" : \"code\"\r\n    },\r\n    \"avs\" : {\r\n      \"code\" : \"code\"\r\n    }\r\n  },\r\n  \"_links\" : {\r\n    \"self\" : {\r\n      \"method\" : \"method\",\r\n      \"href\" : \"href\",\r\n      \"title\" : \"title\"\r\n    }\r\n  },\r\n  \"orderInformation\" : {\r\n    \"lineItems\" : [ {\r\n      \"unitPrice\" : \"unitPrice\",\r\n      \"productCode\" : \"productCode\",\r\n      \"quantity\" : 0.8008281904610115,\r\n      \"productName\" : \"productName\"\r\n    }, {\r\n      \"unitPrice\" : \"unitPrice\",\r\n      \"productCode\" : \"productCode\",\r\n      \"quantity\" : 0.8008281904610115,\r\n      \"productName\" : \"productName\"\r\n    } ],\r\n    \"billTo\" : \"\",\r\n    \"description\" : \"description\",\r\n    \"invoiceDetails\" : {\r\n      \"taxable\" : true,\r\n      \"purchaseOrderNumber\" : \"purchaseOrderNumber\"\r\n    },\r\n    \"amountDetails\" : {\r\n      \"totalAmount\" : \"totalAmount\",\r\n      \"freightAmount\" : \"freightAmount\",\r\n      \"authorizedAmount\" : \"authorizedAmount\",\r\n      \"currency\" : \"currency\",\r\n      \"taxAmount\" : \"taxAmount\",\r\n      \"dutyAmount\" : \"dutyAmount\"\r\n    },\r\n    \"shipTo\" : \"\"\r\n  },\r\n  \"id\" : \"id\",\r\n  \"fraudInformation\" : {\r\n    \"fraudFilterList\" : [ {\r\n      \"name\" : \"name\",\r\n      \"action\" : \"action\"\r\n    }, {\r\n      \"name\" : \"name\",\r\n      \"action\" : \"action\"\r\n    } ],\r\n    \"fraudAction\" : \"fraudAction\"\r\n  },\r\n  \"paymentInformation\" : {\r\n    \"bankAccount\" : {\r\n      \"eCheckType\" : \"eCheckType\",\r\n      \"routingNumber\" : \"routingNumber\",\r\n      \"nameOnAccount\" : \"nameOnAccount\",\r\n      \"checkNumber\" : \"checkNumber\",\r\n      \"accountType\" : \"accountType\",\r\n      \"bankName\" : \"bankName\",\r\n      \"accountNumber\" : \"accountNumber\"\r\n    },\r\n    \"tokenizedCard\" : {\r\n      \"expirationYear\" : \"expirationYear\",\r\n      \"number\" : \"number\",\r\n      \"expirationMonth\" : \"expirationMonth\",\r\n      \"cryptogram\" : \"cryptogram\"\r\n    },\r\n    \"card\" : {\r\n      \"expirationYear\" : \"expirationYear\",\r\n      \"number\" : \"number\",\r\n      \"securityCode\" : \"securityCode\",\r\n      \"expirationMonth\" : \"expirationMonth\",\r\n      \"type\" : \"type\"\r\n    },\r\n    \"fluidData\" : {\r\n      \"descriptor\" : \"descriptor\",\r\n      \"value\" : \"value\",\r\n      \"key\" : \"key\"\r\n    },\r\n    \"customer\" : {\r\n      \"paymentMethodId\" : \"paymentMethodId\",\r\n      \"customerId\" : \"customerId\"\r\n    },\r\n    \"validate\" : true\r\n  },\r\n  \"followUpResponse\" : {\r\n    \"errorMessage\" : \"errorMessage\",\r\n    \"customer\" : {\r\n      \"paymentMethodId\" : \"paymentMethodId\",\r\n      \"customerId\" : \"customerId\"\r\n    }\r\n  },\r\n  \"status\" : \"status\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Payment>(exampleJson)
                        : default(Payment);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a List of Payments
        /// </summary>
        /// <remarks>Get a list of payment transactions.</remarks>
        /// <param name="offset">1-100000. The number of the page to return results from. For example, if limit is set to 100, and offset is set to 2, the function will return 100 transactions starting with the transaction that would otherwise be the transaction numbered 101 in the result set.</param>
        /// <param name="limit">1-1000. The number of transactions per page.</param>
        /// <param name="batchId"></param>
        /// <param name="customerId"></param>
        /// <param name="unsettled"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("//v1/payments/")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetAllPayments")]
        [SwaggerResponse(statusCode: 200, type: typeof(PaymentCollection), description: "OK")]
        public virtual IActionResult GetAllPayments([FromQuery]int? offset, [FromQuery]int? limit, [FromQuery]string batchId, [FromQuery]string customerId, [FromQuery]bool? unsettled)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PaymentCollection));
            string exampleJson = null;
            exampleJson = "{\r\n  \"totalTransactions\" : 0,\r\n  \"_link\" : {\r\n    \"self\" : {\r\n      \"method\" : \"method\",\r\n      \"href\" : \"href\",\r\n      \"title\" : \"title\"\r\n    }\r\n  },\r\n  \"_embedded\" : {\r\n    \"payments\" : [ {\r\n      \"submitTimeUTC\" : \"submitTimeUTC\",\r\n      \"_links\" : {\r\n        \"self\" : {\r\n          \"method\" : \"method\",\r\n          \"href\" : \"href\",\r\n          \"title\" : \"title\"\r\n        }\r\n      },\r\n      \"id\" : \"id\",\r\n      \"status\" : \"status\"\r\n    }, {\r\n      \"submitTimeUTC\" : \"submitTimeUTC\",\r\n      \"_links\" : {\r\n        \"self\" : {\r\n          \"method\" : \"method\",\r\n          \"href\" : \"href\",\r\n          \"title\" : \"title\"\r\n        }\r\n      },\r\n      \"id\" : \"id\",\r\n      \"status\" : \"status\"\r\n    } ]\r\n  }\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PaymentCollection>(exampleJson)
                        : default(PaymentCollection);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get the Details of a Payment Transaction
        /// </summary>
        /// <remarks>Get the details of a payment transaction.</remarks>
        /// <param name="paymentId">The unique identifier of the payment. Returned in the original transaction response.</param>
        /// <response code="200">OK</response>
        /// <response code="404">Payment Not Found</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("//v1/payments/{paymentId}")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetPayment")]
        [SwaggerResponse(statusCode: 200, type: typeof(Payment), description: "OK")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Payment Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        public virtual IActionResult GetPayment([FromRoute][Required]string paymentId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Payment));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\r\n  \"submitTimeUTC\" : \"submitTimeUTC\",\r\n  \"clientReferenceInformation\" : {\r\n    \"code\" : \"code\"\r\n  },\r\n  \"processorInformation\" : {\r\n    \"approvalCode\" : \"approvalCode\",\r\n    \"cardVerification\" : {\r\n      \"resultCode\" : \"resultCode\"\r\n    },\r\n    \"consumerAuthenticationResponse\" : {\r\n      \"code\" : \"code\"\r\n    },\r\n    \"avs\" : {\r\n      \"code\" : \"code\"\r\n    }\r\n  },\r\n  \"_links\" : {\r\n    \"self\" : {\r\n      \"method\" : \"method\",\r\n      \"href\" : \"href\",\r\n      \"title\" : \"title\"\r\n    }\r\n  },\r\n  \"orderInformation\" : {\r\n    \"lineItems\" : [ {\r\n      \"unitPrice\" : \"unitPrice\",\r\n      \"productCode\" : \"productCode\",\r\n      \"quantity\" : 0.8008281904610115,\r\n      \"productName\" : \"productName\"\r\n    }, {\r\n      \"unitPrice\" : \"unitPrice\",\r\n      \"productCode\" : \"productCode\",\r\n      \"quantity\" : 0.8008281904610115,\r\n      \"productName\" : \"productName\"\r\n    } ],\r\n    \"billTo\" : \"\",\r\n    \"description\" : \"description\",\r\n    \"invoiceDetails\" : {\r\n      \"taxable\" : true,\r\n      \"purchaseOrderNumber\" : \"purchaseOrderNumber\"\r\n    },\r\n    \"amountDetails\" : {\r\n      \"totalAmount\" : \"totalAmount\",\r\n      \"freightAmount\" : \"freightAmount\",\r\n      \"authorizedAmount\" : \"authorizedAmount\",\r\n      \"currency\" : \"currency\",\r\n      \"taxAmount\" : \"taxAmount\",\r\n      \"dutyAmount\" : \"dutyAmount\"\r\n    },\r\n    \"shipTo\" : \"\"\r\n  },\r\n  \"id\" : \"id\",\r\n  \"fraudInformation\" : {\r\n    \"fraudFilterList\" : [ {\r\n      \"name\" : \"name\",\r\n      \"action\" : \"action\"\r\n    }, {\r\n      \"name\" : \"name\",\r\n      \"action\" : \"action\"\r\n    } ],\r\n    \"fraudAction\" : \"fraudAction\"\r\n  },\r\n  \"paymentInformation\" : {\r\n    \"bankAccount\" : {\r\n      \"eCheckType\" : \"eCheckType\",\r\n      \"routingNumber\" : \"routingNumber\",\r\n      \"nameOnAccount\" : \"nameOnAccount\",\r\n      \"checkNumber\" : \"checkNumber\",\r\n      \"accountType\" : \"accountType\",\r\n      \"bankName\" : \"bankName\",\r\n      \"accountNumber\" : \"accountNumber\"\r\n    },\r\n    \"tokenizedCard\" : {\r\n      \"expirationYear\" : \"expirationYear\",\r\n      \"number\" : \"number\",\r\n      \"expirationMonth\" : \"expirationMonth\",\r\n      \"cryptogram\" : \"cryptogram\"\r\n    },\r\n    \"card\" : {\r\n      \"expirationYear\" : \"expirationYear\",\r\n      \"number\" : \"number\",\r\n      \"securityCode\" : \"securityCode\",\r\n      \"expirationMonth\" : \"expirationMonth\",\r\n      \"type\" : \"type\"\r\n    },\r\n    \"fluidData\" : {\r\n      \"descriptor\" : \"descriptor\",\r\n      \"value\" : \"value\",\r\n      \"key\" : \"key\"\r\n    },\r\n    \"customer\" : {\r\n      \"paymentMethodId\" : \"paymentMethodId\",\r\n      \"customerId\" : \"customerId\"\r\n    },\r\n    \"validate\" : true\r\n  },\r\n  \"followUpResponse\" : {\r\n    \"errorMessage\" : \"errorMessage\",\r\n    \"customer\" : {\r\n      \"paymentMethodId\" : \"paymentMethodId\",\r\n      \"customerId\" : \"customerId\"\r\n    }\r\n  },\r\n  \"status\" : \"status\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Payment>(exampleJson)
                        : default(Payment);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
