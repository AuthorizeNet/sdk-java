/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class WebhooksEventTypesApiController : ControllerBase
    { 
        /// <summary>
        /// Get a List of All Event Types
        /// </summary>
        /// <remarks>Returns a list of all Webhooks event types that you can enroll in.</remarks>
        /// <response code="200">OK</response>
        /// <response code="500">System Error.</response>
        /// <response code="0">Unexpected Error.</response>
        [HttpGet]
        [Route("//v1/eventtypes")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetEventTypes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<EventType>), description: "OK")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "System Error.")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Unexpected Error.")]
        public virtual IActionResult GetEventTypes()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<EventType>));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"name\" : \"name\"\r\n}, {\r\n  \"name\" : \"name\"\r\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<EventType>>(exampleJson)
                        : default(List<EventType>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
