/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using System.IO;
using System.Xml.Serialization;
using System.Xml;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using System.Security.Cryptography.X509Certificates;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    //[Route("api/[controller]")]
    public class CustomersAddressesApiController : ControllerBase
    { 
        /// <summary>
        /// Create A Customer Address
        /// </summary>
        /// <remarks>Create an address associated with a customer profile.</remarks>
        /// <param name="body">Contains address information.</param>
        /// <param name="customerId">Unique identifier of the customer profile, which was returned in the original transaction response.</param>
        /// <response code="200">OK</response>
        /// <response code="404">Address not created</response>
        /// <response code="0">Unexpected error.</response>
        [HttpPost]
        //[Route("/v1/customers/{customerId}/addresses")]
        [Route("/v1/customers/{customerId}/addresses")]
        //[Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateCustomerAddress")]
        [SwaggerResponse(statusCode: 200, type: typeof(Address), description: "OK")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Address not created")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Unexpected error.")]
        public virtual IActionResult CreateCustomerAddress([FromBody]CreateCustomerAddressNEW body, [FromRoute][Required]string customerId= "924517851")
        {
            try
            {
                // Step 1: Convert the C# object to a JSON string using XsdHelper
                XsdHelper xsdHelper = new XsdHelper();
                string jsonString = xsdHelper.ConvertObjectToJson(body);

                // Step 2: Convert JSON string to XML using XsdHelper
                string xmlRequest = xsdHelper.ConvertJsonToXml(jsonString);

                // Step 3: Send the XML request to the SOAP service
                Example example1 = new Example();
                xsd xsd= new xsd();

                //string result = await xsd.SendSoapRequest(soapRequestXml, "path/to/your/schema.xsd");

                var jsonResponseTask = xsd.SendSoapRequestxsd(xmlRequest);

                //var jsonResponseTask = example1.SendSoapRequest(xmlRequest);
                jsonResponseTask.Wait();

                // Step 4: Capture the JSON response
                string jsonResponse = jsonResponseTask.Result;
                

                // Step 5: Deserialize JSON response into Address object
                var addressResponse = !string.IsNullOrWhiteSpace(jsonResponse)
                                      ? JsonConvert.DeserializeObject<Address>(jsonResponse)
                                      : default(Address);

                // Return the response, either OK (200) with the address object or a 404 error
                return new ObjectResult(addressResponse);

            }
            catch (Exception ex)
            {
                // Handle unexpected errors and return a 500 status code
                return StatusCode(500, new ErrorResponse { Message = $"Unexpected error: {ex.Message}" });
            }
        }

        


        //-------------------------------------------------------------------------------------

        /// <summary>
        /// Delete a Customer Address
        /// </summary>
        /// <remarks>Deletes an address associated with a customer profile.</remarks>
        /// <param name="customerId">Unique identifier of the customer profile.</param>
        /// <param name="addressId">Unique identifier of the address.</param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("//v1/customers/{customerId}/addresses/{addressId}")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteAddress")]
        public virtual IActionResult DeleteAddress([FromRoute][Required]string customerId, [FromRoute][Required]string addressId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get All Customer Addresses
        /// </summary>
        /// <remarks>Get a list of all addresses associated with one customer profile.</remarks>
        /// <param name="customerId">Unique identifier of the customer profile, from the original profile creation response.</param>
        /// <param name="offset">The number of the page to return results from. For example, if limit is set to 100, and offset is set to 2, the function will return 100 transactions starting with the transaction that would otherwise be the transaction numbered 101 in the result set. Accepted values are 1-100000.</param>
        /// <param name="limit">The number of transactions per page. Accepted values are 1-1000.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("//v1/customers/{customerId}/addresses")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetAllCustomerAddresses")]
        [SwaggerResponse(statusCode: 200, type: typeof(AddressCollection), description: "OK")]
        public virtual IActionResult GetAllCustomerAddresses([FromRoute][Required]string customerId, [FromQuery]int? offset, [FromQuery]int? limit)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AddressCollection));
            string exampleJson = null;
            exampleJson = "{\r\n  \"_links\" : {\r\n    \"self\" : {\r\n      \"method\" : \"method\",\r\n      \"href\" : \"href\",\r\n      \"title\" : \"title\"\r\n    }\r\n  },\r\n  \"_embedded\" : {\r\n    \"addresses\" : [ {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"default\" : true,\r\n      \"_links\" : {\r\n        \"self\" : {\r\n          \"method\" : \"method\",\r\n          \"href\" : \"href\",\r\n          \"title\" : \"title\"\r\n        }\r\n      },\r\n      \"id\" : \"id\"\r\n    }, {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"default\" : true,\r\n      \"_links\" : {\r\n        \"self\" : {\r\n          \"method\" : \"method\",\r\n          \"href\" : \"href\",\r\n          \"title\" : \"title\"\r\n        }\r\n      },\r\n      \"id\" : \"id\"\r\n    } ]\r\n  },\r\n  \"totalAddresses\" : 0\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AddressCollection>(exampleJson)
                        : default(AddressCollection);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get A Customer Address
        /// </summary>
        /// <remarks>Get a customer address.</remarks>
        /// <param name="customerId">Unique identifier of the customer profile.</param>
        /// <param name="addressId">Unique identifier of the address.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("//v1/customers/{customerId}/addresses/{addressId}")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetCustomerAddress")]
        [SwaggerResponse(statusCode: 200, type: typeof(Address), description: "OK")]
        public virtual IActionResult GetCustomerAddress([FromRoute][Required]string customerId, [FromRoute][Required]string addressId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Address));
            string exampleJson = null;
            exampleJson = "{\r\n  \"default\" : true,\r\n  \"_links\" : {\r\n    \"self\" : {\r\n      \"method\" : \"method\",\r\n      \"href\" : \"href\",\r\n      \"title\" : \"title\"\r\n    }\r\n  },\r\n  \"baseAddress\" : {\r\n    \"country\" : \"country\",\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"phoneNumber\" : \"phoneNumber\",\r\n    \"address1\" : \"address1\",\r\n    \"postalCode\" : \"postalCode\",\r\n    \"locality\" : \"locality\",\r\n    \"company\" : \"company\",\r\n    \"administrativeArea\" : \"administrativeArea\"\r\n  },\r\n  \"id\" : \"id\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Address>(exampleJson)
                        : default(Address);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update A Customer Address
        /// </summary>
        /// <remarks>Update an address associated with a customer profile.</remarks>
        /// <param name="body">Contains the address information.</param>
        /// <param name="customerId">Unique identifier of the customer profile.</param>
        /// <param name="addressId">Unique identifier of the address.</param>
        /// <response code="200">OK</response>
        /// <response code="404">Address not updated</response>
        /// <response code="0">Unexpected error.</response>
        [HttpPut]
        [Route("//v1/customers/{customerId}/addresses/{addressId}")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateCustomerAddress")]
        [SwaggerResponse(statusCode: 200, type: typeof(Address), description: "OK")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Address not updated")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Unexpected error.")]
        public virtual IActionResult UpdateCustomerAddress([FromBody]CreateCustomerAddress body, [FromRoute][Required]string customerId, [FromRoute][Required]string addressId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Address));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\r\n  \"default\" : true,\r\n  \"_links\" : {\r\n    \"self\" : {\r\n      \"method\" : \"method\",\r\n      \"href\" : \"href\",\r\n      \"title\" : \"title\"\r\n    }\r\n  },\r\n  \"baseAddress\" : {\r\n    \"country\" : \"country\",\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"phoneNumber\" : \"phoneNumber\",\r\n    \"address1\" : \"address1\",\r\n    \"postalCode\" : \"postalCode\",\r\n    \"locality\" : \"locality\",\r\n    \"company\" : \"company\",\r\n    \"administrativeArea\" : \"administrativeArea\"\r\n  },\r\n  \"id\" : \"id\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Address>(exampleJson)
                        : default(Address);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
