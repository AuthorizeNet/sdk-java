/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PaymentsRefundsApiController : ControllerBase
    { 
        /// <summary>
        /// Refund a Payment Transaction
        /// </summary>
        /// <remarks>Refund a previously captured payment transaction by referencing its ID. To credit your customer&#x27;s account without referencing a previous transaction, use &#x60;/credits&#x60; instead</remarks>
        /// <param name="body"></param>
        /// <param name="paymentId">Unique identifier of the payment transaction that you are refunding. The ID is returned in the original transaction reponse.</param>
        /// <response code="200">OK</response>
        /// <response code="404">Payment Not Found</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPost]
        [Route("//v1/payments/{paymentId}/refunds")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("RefundPayment")]
        [SwaggerResponse(statusCode: 200, type: typeof(Payment), description: "OK")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Payment Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        public virtual IActionResult RefundPayment([FromBody]RefundRequest body, [FromRoute][Required]string paymentId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Payment));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\r\n  \"submitTimeUTC\" : \"submitTimeUTC\",\r\n  \"clientReferenceInformation\" : {\r\n    \"code\" : \"code\"\r\n  },\r\n  \"processorInformation\" : {\r\n    \"approvalCode\" : \"approvalCode\",\r\n    \"cardVerification\" : {\r\n      \"resultCode\" : \"resultCode\"\r\n    },\r\n    \"consumerAuthenticationResponse\" : {\r\n      \"code\" : \"code\"\r\n    },\r\n    \"avs\" : {\r\n      \"code\" : \"code\"\r\n    }\r\n  },\r\n  \"_links\" : {\r\n    \"self\" : {\r\n      \"method\" : \"method\",\r\n      \"href\" : \"href\",\r\n      \"title\" : \"title\"\r\n    }\r\n  },\r\n  \"orderInformation\" : {\r\n    \"lineItems\" : [ {\r\n      \"unitPrice\" : \"unitPrice\",\r\n      \"productCode\" : \"productCode\",\r\n      \"quantity\" : 0.8008281904610115,\r\n      \"productName\" : \"productName\"\r\n    }, {\r\n      \"unitPrice\" : \"unitPrice\",\r\n      \"productCode\" : \"productCode\",\r\n      \"quantity\" : 0.8008281904610115,\r\n      \"productName\" : \"productName\"\r\n    } ],\r\n    \"billTo\" : \"\",\r\n    \"description\" : \"description\",\r\n    \"invoiceDetails\" : {\r\n      \"taxable\" : true,\r\n      \"purchaseOrderNumber\" : \"purchaseOrderNumber\"\r\n    },\r\n    \"amountDetails\" : {\r\n      \"totalAmount\" : \"totalAmount\",\r\n      \"freightAmount\" : \"freightAmount\",\r\n      \"authorizedAmount\" : \"authorizedAmount\",\r\n      \"currency\" : \"currency\",\r\n      \"taxAmount\" : \"taxAmount\",\r\n      \"dutyAmount\" : \"dutyAmount\"\r\n    },\r\n    \"shipTo\" : \"\"\r\n  },\r\n  \"id\" : \"id\",\r\n  \"fraudInformation\" : {\r\n    \"fraudFilterList\" : [ {\r\n      \"name\" : \"name\",\r\n      \"action\" : \"action\"\r\n    }, {\r\n      \"name\" : \"name\",\r\n      \"action\" : \"action\"\r\n    } ],\r\n    \"fraudAction\" : \"fraudAction\"\r\n  },\r\n  \"paymentInformation\" : {\r\n    \"bankAccount\" : {\r\n      \"eCheckType\" : \"eCheckType\",\r\n      \"routingNumber\" : \"routingNumber\",\r\n      \"nameOnAccount\" : \"nameOnAccount\",\r\n      \"checkNumber\" : \"checkNumber\",\r\n      \"accountType\" : \"accountType\",\r\n      \"bankName\" : \"bankName\",\r\n      \"accountNumber\" : \"accountNumber\"\r\n    },\r\n    \"tokenizedCard\" : {\r\n      \"expirationYear\" : \"expirationYear\",\r\n      \"number\" : \"number\",\r\n      \"expirationMonth\" : \"expirationMonth\",\r\n      \"cryptogram\" : \"cryptogram\"\r\n    },\r\n    \"card\" : {\r\n      \"expirationYear\" : \"expirationYear\",\r\n      \"number\" : \"number\",\r\n      \"securityCode\" : \"securityCode\",\r\n      \"expirationMonth\" : \"expirationMonth\",\r\n      \"type\" : \"type\"\r\n    },\r\n    \"fluidData\" : {\r\n      \"descriptor\" : \"descriptor\",\r\n      \"value\" : \"value\",\r\n      \"key\" : \"key\"\r\n    },\r\n    \"customer\" : {\r\n      \"paymentMethodId\" : \"paymentMethodId\",\r\n      \"customerId\" : \"customerId\"\r\n    },\r\n    \"validate\" : true\r\n  },\r\n  \"followUpResponse\" : {\r\n    \"errorMessage\" : \"errorMessage\",\r\n    \"customer\" : {\r\n      \"paymentMethodId\" : \"paymentMethodId\",\r\n      \"customerId\" : \"customerId\"\r\n    }\r\n  },\r\n  \"status\" : \"status\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Payment>(exampleJson)
                        : default(Payment);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
