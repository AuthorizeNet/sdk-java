/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CustomersCustomersApiController : ControllerBase
    { 
        /// <summary>
        /// Delete a Customer Profile
        /// </summary>
        /// <remarks>Deletes a customer profile.</remarks>
        /// <param name="customerId">Unique identifier of the customer profile, from the original profile-creation response.</param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("//v1/customers/{customerId}")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteCustomer")]
        public virtual IActionResult DeleteCustomer([FromRoute][Required]string customerId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get A Customer
        /// </summary>
        /// <remarks>Get the details of a single customer profile.</remarks>
        /// <param name="customerId">Unique identifier of the customer profile, from the original profile-creation response.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("//v1/customers/{customerId}")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetCustomer")]
        [SwaggerResponse(statusCode: 200, type: typeof(Customer), description: "OK")]
        public virtual IActionResult GetCustomer([FromRoute][Required]string customerId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Customer));
            string exampleJson = null;
            exampleJson = "{\r\n  \"identifier\" : {\r\n    \"reference\" : \"reference\",\r\n    \"email\" : \"email\"\r\n  },\r\n  \"_links\" : { },\r\n  \"description\" : \"description\",\r\n  \"id\" : \"id\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Customer>(exampleJson)
                        : default(Customer);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update A Customer Profile
        /// </summary>
        /// <remarks>Updates a customer profile.</remarks>
        /// <param name="body">Contains the updated information.</param>
        /// <param name="customerId">Unique identifier of the customer profile, from the original profile-creation response.</param>
        /// <response code="200">OK</response>
        /// <response code="404">Customer not updated</response>
        /// <response code="0">Unexpected error.</response>
        [HttpPut]
        [Route("//v1/customers/{customerId}")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateCustomer")]
        [SwaggerResponse(statusCode: 200, type: typeof(Customer), description: "OK")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Customer not updated")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Unexpected error.")]
        public virtual IActionResult UpdateCustomer([FromBody]CreateCustomerAndPaymentMethod body, [FromRoute][Required]string customerId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Customer));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\r\n  \"identifier\" : {\r\n    \"reference\" : \"reference\",\r\n    \"email\" : \"email\"\r\n  },\r\n  \"_links\" : { },\r\n  \"description\" : \"description\",\r\n  \"id\" : \"id\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Customer>(exampleJson)
                        : default(Customer);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
