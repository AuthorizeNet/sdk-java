/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class WebhooksNotificationsApiController : ControllerBase
    { 
        /// <summary>
        /// Get a Notification
        /// </summary>
        /// <remarks>Retreives the details of a single notification.</remarks>
        /// <param name="notificationsId">Unique identifier of the notification. The identifier was sent in the original notification.</param>
        /// <response code="200">OK</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">System Error.</response>
        /// <response code="0">Unexpected Error.</response>
        [HttpGet]
        [Route("//v1/notifications/{notificationsId}")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetNotification")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetNotificationResponse), description: "OK")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "System Error.")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Unexpected Error.")]
        public virtual IActionResult GetNotification([FromRoute][Required]string notificationsId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetNotificationResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<GetNotificationResponse>(exampleJson)
                        : default(GetNotificationResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Notification History
        /// </summary>
        /// <remarks>Retreives the history of notifications for this account.</remarks>
        /// <param name="deliveryStatus">Filter by delivery status. Status include the following./n/n* Delivered/n/n* Failed</param>
        /// <param name="fromDate">Only includes notifications after the specified date, in YYYY-MM-DD format.</param>
        /// <param name="toDate">Only includes notifications before specified date, in YYYY-MM-DD format.</param>
        /// <param name="offset">The number of the page to return results from. For example, if limit is set to 100, and offset is set to 2, the function will return 100 transactions, beginning with the transaction that would otherwise be the transaction numbered 101 in the result set. Accepted values are 1-100000.</param>
        /// <param name="limit">The number of transactions per page. Accepted values are 1-1000.</param>
        /// <response code="200">OK</response>
        /// <response code="500">System Error.</response>
        /// <response code="0">Unexpected Error.</response>
        [HttpGet]
        [Route("//v1/notifications")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetNotifications")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetNotificationsResponse), description: "OK")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "System Error.")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Unexpected Error.")]
        public virtual IActionResult GetNotifications([FromQuery]string deliveryStatus, [FromQuery]string fromDate, [FromQuery]string toDate, [FromQuery]int? offset, [FromQuery]int? limit)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetNotificationsResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\r\n  \"_links\" : {\r\n    \"self\" : {\r\n      \"method\" : \"method\",\r\n      \"href\" : \"href\",\r\n      \"title\" : \"title\"\r\n    }\r\n  },\r\n  \"notifications\" : [ {\r\n    \"webhookId\" : \"webhookId\",\r\n    \"notificationId\" : \"notificationId\",\r\n    \"eventType\" : \"eventType\",\r\n    \"deliveryStatus\" : \"deliveryStatus\",\r\n    \"eventDate\" : \"eventDate\"\r\n  }, {\r\n    \"webhookId\" : \"webhookId\",\r\n    \"notificationId\" : \"notificationId\",\r\n    \"eventType\" : \"eventType\",\r\n    \"deliveryStatus\" : \"deliveryStatus\",\r\n    \"eventDate\" : \"eventDate\"\r\n  } ]\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<GetNotificationsResponse>(exampleJson)
                        : default(GetNotificationsResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
