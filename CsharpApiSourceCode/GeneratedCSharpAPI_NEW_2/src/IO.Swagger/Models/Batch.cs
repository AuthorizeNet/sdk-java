/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Contains information about the batch that processed the transaction.
    /// </summary>
    [DataContract]
    public partial class Batch : IEquatable<Batch>
    { 
        /// <summary>
        /// The unique identifier of the batch.
        /// </summary>
        /// <value>The unique identifier of the batch.</value>

        [DataMember(Name="batchID")]
        public string BatchID { get; set; }

        /// <summary>
        /// Status of the batch. One of the following * &#x60;settledSuccessfully&#x60; * &#x60;settlementError&#x60; * &#x60;pendingSettlement&#x60;
        /// </summary>
        /// <value>Status of the batch. One of the following * &#x60;settledSuccessfully&#x60; * &#x60;settlementError&#x60; * &#x60;pendingSettlement&#x60;</value>

        [DataMember(Name="settlementState")]
        public string SettlementState { get; set; }

        /// <summary>
        /// Date and time when the batch was settled, expressed in Coordinated Universal Time. A T character separates the date from the time. For example, &#x60;YYYY-MM-DDThh:mm:ss&#x60;.
        /// </summary>
        /// <value>Date and time when the batch was settled, expressed in Coordinated Universal Time. A T character separates the date from the time. For example, &#x60;YYYY-MM-DDThh:mm:ss&#x60;.</value>

        [DataMember(Name="settlmentTimeUTC")]
        public string SettlmentTimeUTC { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Batch {\n");
            sb.Append("  BatchID: ").Append(BatchID).Append("\n");
            sb.Append("  SettlementState: ").Append(SettlementState).Append("\n");
            sb.Append("  SettlmentTimeUTC: ").Append(SettlmentTimeUTC).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Batch)obj);
        }

        /// <summary>
        /// Returns true if Batch instances are equal
        /// </summary>
        /// <param name="other">Instance of Batch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Batch other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BatchID == other.BatchID ||
                    BatchID != null &&
                    BatchID.Equals(other.BatchID)
                ) && 
                (
                    SettlementState == other.SettlementState ||
                    SettlementState != null &&
                    SettlementState.Equals(other.SettlementState)
                ) && 
                (
                    SettlmentTimeUTC == other.SettlmentTimeUTC ||
                    SettlmentTimeUTC != null &&
                    SettlmentTimeUTC.Equals(other.SettlmentTimeUTC)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BatchID != null)
                    hashCode = hashCode * 59 + BatchID.GetHashCode();
                    if (SettlementState != null)
                    hashCode = hashCode * 59 + SettlementState.GetHashCode();
                    if (SettlmentTimeUTC != null)
                    hashCode = hashCode * 59 + SettlmentTimeUTC.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Batch left, Batch right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Batch left, Batch right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
