/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProcessorInformation : IEquatable<ProcessorInformation>
    { 
        /// <summary>
        /// Authorization or approval code.
        /// </summary>
        /// <value>Authorization or approval code.</value>

        [DataMember(Name="approvalCode")]
        public string ApprovalCode { get; set; }

        /// <summary>
        /// Gets or Sets Avs
        /// </summary>

        [DataMember(Name="avs")]
        public ProcessorInformationAvs Avs { get; set; }

        /// <summary>
        /// Gets or Sets CardVerification
        /// </summary>

        [DataMember(Name="cardVerification")]
        public ProcessorInformationCardVerification CardVerification { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerAuthenticationResponse
        /// </summary>

        [DataMember(Name="consumerAuthenticationResponse")]
        public ProcessorInformationConsumerAuthenticationResponse ConsumerAuthenticationResponse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessorInformation {\n");
            sb.Append("  ApprovalCode: ").Append(ApprovalCode).Append("\n");
            sb.Append("  Avs: ").Append(Avs).Append("\n");
            sb.Append("  CardVerification: ").Append(CardVerification).Append("\n");
            sb.Append("  ConsumerAuthenticationResponse: ").Append(ConsumerAuthenticationResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProcessorInformation)obj);
        }

        /// <summary>
        /// Returns true if ProcessorInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of ProcessorInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessorInformation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ApprovalCode == other.ApprovalCode ||
                    ApprovalCode != null &&
                    ApprovalCode.Equals(other.ApprovalCode)
                ) && 
                (
                    Avs == other.Avs ||
                    Avs != null &&
                    Avs.Equals(other.Avs)
                ) && 
                (
                    CardVerification == other.CardVerification ||
                    CardVerification != null &&
                    CardVerification.Equals(other.CardVerification)
                ) && 
                (
                    ConsumerAuthenticationResponse == other.ConsumerAuthenticationResponse ||
                    ConsumerAuthenticationResponse != null &&
                    ConsumerAuthenticationResponse.Equals(other.ConsumerAuthenticationResponse)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ApprovalCode != null)
                    hashCode = hashCode * 59 + ApprovalCode.GetHashCode();
                    if (Avs != null)
                    hashCode = hashCode * 59 + Avs.GetHashCode();
                    if (CardVerification != null)
                    hashCode = hashCode * 59 + CardVerification.GetHashCode();
                    if (ConsumerAuthenticationResponse != null)
                    hashCode = hashCode * 59 + ConsumerAuthenticationResponse.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProcessorInformation left, ProcessorInformation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProcessorInformation left, ProcessorInformation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
