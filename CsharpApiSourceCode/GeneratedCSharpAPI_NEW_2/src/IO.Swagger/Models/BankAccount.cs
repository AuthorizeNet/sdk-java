/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// This object contains the customer&#x27;s bank account payment information.
    /// </summary>
    [DataContract]
    public partial class BankAccount : IEquatable<BankAccount>
    { 
        /// <summary>
        /// The type of bank account used for the eCheck.Net transaction. The value of &#x60;accountType&#x60; must be valid for the &#x60;echeckType&#x60; value submitted. Valid values include&amp;#58; * &#x60;checking&#x60; * &#x60;savings&#x60; * &#x60;businessChecking&#x60;
        /// </summary>
        /// <value>The type of bank account used for the eCheck.Net transaction. The value of &#x60;accountType&#x60; must be valid for the &#x60;echeckType&#x60; value submitted. Valid values include&amp;#58; * &#x60;checking&#x60; * &#x60;savings&#x60; * &#x60;businessChecking&#x60;</value>

        [DataMember(Name="accountType")]
        public string AccountType { get; set; }

        /// <summary>
        /// The ABA routing number. Masked except for the last four digits. For example, XXXX0101. &lt;br /&gt;&lt;br /&gt; Numeric, up to 9 digits.
        /// </summary>
        /// <value>The ABA routing number. Masked except for the last four digits. For example, XXXX0101. &lt;br /&gt;&lt;br /&gt; Numeric, up to 9 digits.</value>
        [Required]

        [DataMember(Name="routingNumber")]
        public string RoutingNumber { get; set; }

        /// <summary>
        /// The bank account number. Masked except for the last four digits. For example, XXXX0101. &lt;br /&gt;&lt;br /&gt; Numeric, up to 17 digits.
        /// </summary>
        /// <value>The bank account number. Masked except for the last four digits. For example, XXXX0101. &lt;br /&gt;&lt;br /&gt; Numeric, up to 17 digits.</value>
        [Required]

        [DataMember(Name="accountNumber")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Name of the person who holds the bank account. &lt;br /&gt;&lt;br /&gt; String, up to 22 characters.
        /// </summary>
        /// <value>Name of the person who holds the bank account. &lt;br /&gt;&lt;br /&gt; String, up to 22 characters.</value>
        [Required]

        [DataMember(Name="nameOnAccount")]
        public string NameOnAccount { get; set; }

        /// <summary>
        /// The type of eCheck transaction.  Valid values include * &#x60;PPD&#x60; * &#x60;WEB&#x60; * &#x60;CCD&#x60; * &#x60;TEL&#x60; * &#x60;ARC&#x60; * &#x60;BOC&#x60;
        /// </summary>
        /// <value>The type of eCheck transaction.  Valid values include * &#x60;PPD&#x60; * &#x60;WEB&#x60; * &#x60;CCD&#x60; * &#x60;TEL&#x60; * &#x60;ARC&#x60; * &#x60;BOC&#x60;</value>

        [DataMember(Name="eCheckType")]
        public string ECheckType { get; set; }

        /// <summary>
        /// Name of the bank to which the account belongs.
        /// </summary>
        /// <value>Name of the bank to which the account belongs.</value>

        [DataMember(Name="bankName")]
        public string BankName { get; set; }

        /// <summary>
        /// The number of the check. Do not send &#x60;checkNumber&#x60; unless &#x60;echeckType&#x60; is either &#x60;ARC&#x60; or &#x60;BOC&#x60;. &lt;br /&gt;&lt;br /&gt; Numeric, up to 15 digits.
        /// </summary>
        /// <value>The number of the check. Do not send &#x60;checkNumber&#x60; unless &#x60;echeckType&#x60; is either &#x60;ARC&#x60; or &#x60;BOC&#x60;. &lt;br /&gt;&lt;br /&gt; Numeric, up to 15 digits.</value>

        [DataMember(Name="checkNumber")]
        public string CheckNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankAccount {\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  RoutingNumber: ").Append(RoutingNumber).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  NameOnAccount: ").Append(NameOnAccount).Append("\n");
            sb.Append("  ECheckType: ").Append(ECheckType).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  CheckNumber: ").Append(CheckNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BankAccount)obj);
        }

        /// <summary>
        /// Returns true if BankAccount instances are equal
        /// </summary>
        /// <param name="other">Instance of BankAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankAccount other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AccountType == other.AccountType ||
                    AccountType != null &&
                    AccountType.Equals(other.AccountType)
                ) && 
                (
                    RoutingNumber == other.RoutingNumber ||
                    RoutingNumber != null &&
                    RoutingNumber.Equals(other.RoutingNumber)
                ) && 
                (
                    AccountNumber == other.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(other.AccountNumber)
                ) && 
                (
                    NameOnAccount == other.NameOnAccount ||
                    NameOnAccount != null &&
                    NameOnAccount.Equals(other.NameOnAccount)
                ) && 
                (
                    ECheckType == other.ECheckType ||
                    ECheckType != null &&
                    ECheckType.Equals(other.ECheckType)
                ) && 
                (
                    BankName == other.BankName ||
                    BankName != null &&
                    BankName.Equals(other.BankName)
                ) && 
                (
                    CheckNumber == other.CheckNumber ||
                    CheckNumber != null &&
                    CheckNumber.Equals(other.CheckNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AccountType != null)
                    hashCode = hashCode * 59 + AccountType.GetHashCode();
                    if (RoutingNumber != null)
                    hashCode = hashCode * 59 + RoutingNumber.GetHashCode();
                    if (AccountNumber != null)
                    hashCode = hashCode * 59 + AccountNumber.GetHashCode();
                    if (NameOnAccount != null)
                    hashCode = hashCode * 59 + NameOnAccount.GetHashCode();
                    if (ECheckType != null)
                    hashCode = hashCode * 59 + ECheckType.GetHashCode();
                    if (BankName != null)
                    hashCode = hashCode * 59 + BankName.GetHashCode();
                    if (CheckNumber != null)
                    hashCode = hashCode * 59 + CheckNumber.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BankAccount left, BankAccount right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BankAccount left, BankAccount right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
