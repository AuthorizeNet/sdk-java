/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Response model for get a Webhook
    /// </summary>
    [DataContract]
    public partial class GetWebhookResponse : IEquatable<GetWebhookResponse>
    { 
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [Required]

        [DataMember(Name="_links")]
        public SelfLink Links { get; set; }

        /// <summary>
        /// Unique identifier of the notification. The identifier was sent in the original notification.
        /// </summary>
        /// <value>Unique identifier of the notification. The identifier was sent in the original notification.</value>
        [Required]

        [DataMember(Name="webhookId")]
        public string WebhookId { get; set; }

        /// <summary>
        /// Label of the new Webhook.
        /// </summary>
        /// <value>Label of the new Webhook.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Unique identifier of the webhook. The identifier was sent in the response to the webhook request.
        /// </summary>
        /// <value>Unique identifier of the webhook. The identifier was sent in the response to the webhook request.</value>
        [Required]

        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Callback Url for the webhook.
        /// </summary>
        /// <value>Callback Url for the webhook.</value>
        [Required]

        [DataMember(Name="url")]
        public string Url { get; set; }

        /// <summary>
        /// List of events that will trigger notifications for this webhook. For a complete list of event types, see the [Webhooks API Documentation](https://developer.authorize.net/api/reference/features/webhooks.html#Event_Types_and_Payloads) page.
        /// </summary>
        /// <value>List of events that will trigger notifications for this webhook. For a complete list of event types, see the [Webhooks API Documentation](https://developer.authorize.net/api/reference/features/webhooks.html#Event_Types_and_Payloads) page.</value>
        [Required]

        [DataMember(Name="eventTypes")]
        public List<string> EventTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetWebhookResponse {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  WebhookId: ").Append(WebhookId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  EventTypes: ").Append(EventTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetWebhookResponse)obj);
        }

        /// <summary>
        /// Returns true if GetWebhookResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of GetWebhookResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetWebhookResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.Equals(other.Links)
                ) && 
                (
                    WebhookId == other.WebhookId ||
                    WebhookId != null &&
                    WebhookId.Equals(other.WebhookId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    EventTypes == other.EventTypes ||
                    EventTypes != null &&
                    EventTypes.SequenceEqual(other.EventTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                    if (WebhookId != null)
                    hashCode = hashCode * 59 + WebhookId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (EventTypes != null)
                    hashCode = hashCode * 59 + EventTypes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetWebhookResponse left, GetWebhookResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetWebhookResponse left, GetWebhookResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
