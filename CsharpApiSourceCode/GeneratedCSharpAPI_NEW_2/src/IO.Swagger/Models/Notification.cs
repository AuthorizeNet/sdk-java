/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Notification Model
    /// </summary>
    [DataContract]
    public partial class Notification : IEquatable<Notification>
    { 
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [Required]

        [DataMember(Name="_links")]
        public SelfLink Links { get; set; }

        /// <summary>
        /// Unique identifier of the notification
        /// </summary>
        /// <value>Unique identifier of the notification</value>
        [Required]

        [DataMember(Name="notificationId")]
        public string NotificationId { get; set; }

        /// <summary>
        /// Current status of the notification.
        /// </summary>
        /// <value>Current status of the notification.</value>
        [Required]

        [DataMember(Name="deliveryStatus")]
        public string DeliveryStatus { get; set; }

        /// <summary>
        /// Type of event that triggered the notification.
        /// </summary>
        /// <value>Type of event that triggered the notification.</value>
        [Required]

        [DataMember(Name="eventType")]
        public string EventType { get; set; }

        /// <summary>
        /// Date and time of the notifications sent.
        /// </summary>
        /// <value>Date and time of the notifications sent.</value>
        [Required]

        [DataMember(Name="eventDate")]
        public string EventDate { get; set; }

        /// <summary>
        /// Label of the Webhook.
        /// </summary>
        /// <value>Label of the Webhook.</value>
        [Required]

        [DataMember(Name="webhookId")]
        public string WebhookId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Notification {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  NotificationId: ").Append(NotificationId).Append("\n");
            sb.Append("  DeliveryStatus: ").Append(DeliveryStatus).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  EventDate: ").Append(EventDate).Append("\n");
            sb.Append("  WebhookId: ").Append(WebhookId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Notification)obj);
        }

        /// <summary>
        /// Returns true if Notification instances are equal
        /// </summary>
        /// <param name="other">Instance of Notification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Notification other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.Equals(other.Links)
                ) && 
                (
                    NotificationId == other.NotificationId ||
                    NotificationId != null &&
                    NotificationId.Equals(other.NotificationId)
                ) && 
                (
                    DeliveryStatus == other.DeliveryStatus ||
                    DeliveryStatus != null &&
                    DeliveryStatus.Equals(other.DeliveryStatus)
                ) && 
                (
                    EventType == other.EventType ||
                    EventType != null &&
                    EventType.Equals(other.EventType)
                ) && 
                (
                    EventDate == other.EventDate ||
                    EventDate != null &&
                    EventDate.Equals(other.EventDate)
                ) && 
                (
                    WebhookId == other.WebhookId ||
                    WebhookId != null &&
                    WebhookId.Equals(other.WebhookId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                    if (NotificationId != null)
                    hashCode = hashCode * 59 + NotificationId.GetHashCode();
                    if (DeliveryStatus != null)
                    hashCode = hashCode * 59 + DeliveryStatus.GetHashCode();
                    if (EventType != null)
                    hashCode = hashCode * 59 + EventType.GetHashCode();
                    if (EventDate != null)
                    hashCode = hashCode * 59 + EventDate.GetHashCode();
                    if (WebhookId != null)
                    hashCode = hashCode * 59 + WebhookId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Notification left, Notification right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Notification left, Notification right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
