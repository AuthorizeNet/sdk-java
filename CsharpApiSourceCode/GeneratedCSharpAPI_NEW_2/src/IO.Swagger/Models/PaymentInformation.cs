/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// This object sets the method of payment for a transaction. There are four available payment instruments, shown below. |Payment Instrument  | Description  | |- -- --|- -- --| | &#x60;creditCard&#x60; | Contains the customer&#x27;s credit card payment data. | | &#x60;BankAccount&#x60;  | Contains the customer&#x27;s banking information.   | | &#x60;FluidData&#x60; |  Contains enrypted payment data for use with the following tpyes of transactions - | | * Visa Checkout | | | * Authorize.Net Accept | | | * Apple Pay | | | * Android Pay | | &#x60;CustomerPayment&#x60; | Contains the Authorize.Net customer profile information necessary to create a payment transaction from stored payment data. | 
    /// </summary>
    [DataContract]
    public partial class PaymentInformation : IEquatable<PaymentInformation>
    { 
        /// <summary>
        /// Gets or Sets Card
        /// </summary>

        [DataMember(Name="card")]
        public Card Card { get; set; }

        /// <summary>
        /// Gets or Sets BankAccount
        /// </summary>

        [DataMember(Name="bankAccount")]
        public BankAccount BankAccount { get; set; }

        /// <summary>
        /// Gets or Sets FluidData
        /// </summary>

        [DataMember(Name="fluidData")]
        public FluidData FluidData { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>

        [DataMember(Name="customer")]
        public CustomerPayment Customer { get; set; }

        /// <summary>
        /// Gets or Sets TokenizedCard
        /// </summary>

        [DataMember(Name="tokenizedCard")]
        public TokenizedCard TokenizedCard { get; set; }

        /// <summary>
        /// If the customer profile contains no payment data, this field should not be sent.  Submitting this field with a value of &#x60;true&#x60; sends a $0 or $0.01 (depending on card type and processor) live transaction is processed for the card and then immediately voided. Address is required for cards that support $0 authorizations and will be validated along with card code if submitted.  Submitting this field with a value of false, the card data is validated using simple mathematical checks to confirm that it appears to be valid. It is not a guarantee that the card is legitimate and customer data is not validated.
        /// </summary>
        /// <value>If the customer profile contains no payment data, this field should not be sent.  Submitting this field with a value of &#x60;true&#x60; sends a $0 or $0.01 (depending on card type and processor) live transaction is processed for the card and then immediately voided. Address is required for cards that support $0 authorizations and will be validated along with card code if submitted.  Submitting this field with a value of false, the card data is validated using simple mathematical checks to confirm that it appears to be valid. It is not a guarantee that the card is legitimate and customer data is not validated.</value>

        [DataMember(Name="validate")]
        public bool? Validate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentInformation {\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("  BankAccount: ").Append(BankAccount).Append("\n");
            sb.Append("  FluidData: ").Append(FluidData).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  TokenizedCard: ").Append(TokenizedCard).Append("\n");
            sb.Append("  Validate: ").Append(Validate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaymentInformation)obj);
        }

        /// <summary>
        /// Returns true if PaymentInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentInformation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Card == other.Card ||
                    Card != null &&
                    Card.Equals(other.Card)
                ) && 
                (
                    BankAccount == other.BankAccount ||
                    BankAccount != null &&
                    BankAccount.Equals(other.BankAccount)
                ) && 
                (
                    FluidData == other.FluidData ||
                    FluidData != null &&
                    FluidData.Equals(other.FluidData)
                ) && 
                (
                    Customer == other.Customer ||
                    Customer != null &&
                    Customer.Equals(other.Customer)
                ) && 
                (
                    TokenizedCard == other.TokenizedCard ||
                    TokenizedCard != null &&
                    TokenizedCard.Equals(other.TokenizedCard)
                ) && 
                (
                    Validate == other.Validate ||
                    Validate != null &&
                    Validate.Equals(other.Validate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Card != null)
                    hashCode = hashCode * 59 + Card.GetHashCode();
                    if (BankAccount != null)
                    hashCode = hashCode * 59 + BankAccount.GetHashCode();
                    if (FluidData != null)
                    hashCode = hashCode * 59 + FluidData.GetHashCode();
                    if (Customer != null)
                    hashCode = hashCode * 59 + Customer.GetHashCode();
                    if (TokenizedCard != null)
                    hashCode = hashCode * 59 + TokenizedCard.GetHashCode();
                    if (Validate != null)
                    hashCode = hashCode * 59 + Validate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PaymentInformation left, PaymentInformation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentInformation left, PaymentInformation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
