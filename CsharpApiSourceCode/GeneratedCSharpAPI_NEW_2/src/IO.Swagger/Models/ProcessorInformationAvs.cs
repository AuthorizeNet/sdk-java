/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProcessorInformationAvs : IEquatable<ProcessorInformationAvs>
    { 
        /// <summary>
        /// Address Verification Service (AVS) response code. Indicates the result of the AVS filter.  *  &#x60;A&#x60; &#x3D; Address (Street) matches, ZIP does not. *  &#x60;B&#x60; &#x3D; Address information not provided for AVS check. *  &#x60;E&#x60; &#x3D; AVS error. *  &#x60;G&#x60; &#x3D; Non-U.S. Card Issuing Bank. *  &#x60;N&#x60; &#x3D; No Match on Address (Street) or ZIP. *  &#x60;P&#x60; &#x3D; AVS not applicable for this transaction. *  &#x60;R&#x60; &#x3D; Retry â€” System unavailable or timed out. *  &#x60;S&#x60; &#x3D; Service not supported by issuer. *  &#x60;U&#x60; &#x3D; Address information is unavailable. *  &#x60;W&#x60; &#x3D; Nine digit ZIP matches, Address (Street) does not. *  &#x60;X&#x60; &#x3D; Address (Street) and nine digit ZIP match. *  &#x60;Y&#x60; &#x3D; Address (Street) and five digit ZIP match. *  &#x60;Z&#x60; &#x3D; Five digit ZIP matches, Address (Street) does not.
        /// </summary>
        /// <value>Address Verification Service (AVS) response code. Indicates the result of the AVS filter.  *  &#x60;A&#x60; &#x3D; Address (Street) matches, ZIP does not. *  &#x60;B&#x60; &#x3D; Address information not provided for AVS check. *  &#x60;E&#x60; &#x3D; AVS error. *  &#x60;G&#x60; &#x3D; Non-U.S. Card Issuing Bank. *  &#x60;N&#x60; &#x3D; No Match on Address (Street) or ZIP. *  &#x60;P&#x60; &#x3D; AVS not applicable for this transaction. *  &#x60;R&#x60; &#x3D; Retry â€” System unavailable or timed out. *  &#x60;S&#x60; &#x3D; Service not supported by issuer. *  &#x60;U&#x60; &#x3D; Address information is unavailable. *  &#x60;W&#x60; &#x3D; Nine digit ZIP matches, Address (Street) does not. *  &#x60;X&#x60; &#x3D; Address (Street) and nine digit ZIP match. *  &#x60;Y&#x60; &#x3D; Address (Street) and five digit ZIP match. *  &#x60;Z&#x60; &#x3D; Five digit ZIP matches, Address (Street) does not.</value>

        [DataMember(Name="code")]
        public string Code { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessorInformationAvs {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProcessorInformationAvs)obj);
        }

        /// <summary>
        /// Returns true if ProcessorInformationAvs instances are equal
        /// </summary>
        /// <param name="other">Instance of ProcessorInformationAvs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessorInformationAvs other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProcessorInformationAvs left, ProcessorInformationAvs right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProcessorInformationAvs left, ProcessorInformationAvs right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
