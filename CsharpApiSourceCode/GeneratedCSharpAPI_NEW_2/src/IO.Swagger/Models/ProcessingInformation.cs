/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProcessingInformation : IEquatable<ProcessingInformation>
    { 
        /// <summary>
        /// Submit &#x60;true&#x60; to capture the the payment after it is successfully authorized.
        /// </summary>
        /// <value>Submit &#x60;true&#x60; to capture the the payment after it is successfully authorized.</value>

        [DataMember(Name="capture")]
        public bool? Capture { get; set; }

        /// <summary>
        /// The solution ID is generated by Authorize.Net and provided to the solution provider. Alphanumeric. 50-character maximum.
        /// </summary>
        /// <value>The solution ID is generated by Authorize.Net and provided to the solution provider. Alphanumeric. 50-character maximum.</value>

        [DataMember(Name="paymentSolution")]
        public string PaymentSolution { get; set; }

        /// <summary>
        /// Gets or Sets Batch
        /// </summary>

        [DataMember(Name="batch")]
        public Batch Batch { get; set; }

        /// <summary>
        /// Indicates whether the payment is part of a subscription.
        /// </summary>
        /// <value>Indicates whether the payment is part of a subscription.</value>

        [DataMember(Name="recurringBilling")]
        public bool? RecurringBilling { get; set; }

        /// <summary>
        /// Follow up action to be taken once transaction is successful. Valid values are &#x60;CREATE_CUSTOMER_PROFILE&#x60; and &#x60;CREATE_CUSTOMER_PAYMENT_PROFILE&#x60;.
        /// </summary>
        /// <value>Follow up action to be taken once transaction is successful. Valid values are &#x60;CREATE_CUSTOMER_PROFILE&#x60; and &#x60;CREATE_CUSTOMER_PAYMENT_PROFILE&#x60;.</value>

        [DataMember(Name="followUpAction")]
        public string FollowUpAction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessingInformation {\n");
            sb.Append("  Capture: ").Append(Capture).Append("\n");
            sb.Append("  PaymentSolution: ").Append(PaymentSolution).Append("\n");
            sb.Append("  Batch: ").Append(Batch).Append("\n");
            sb.Append("  RecurringBilling: ").Append(RecurringBilling).Append("\n");
            sb.Append("  FollowUpAction: ").Append(FollowUpAction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProcessingInformation)obj);
        }

        /// <summary>
        /// Returns true if ProcessingInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of ProcessingInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessingInformation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Capture == other.Capture ||
                    Capture != null &&
                    Capture.Equals(other.Capture)
                ) && 
                (
                    PaymentSolution == other.PaymentSolution ||
                    PaymentSolution != null &&
                    PaymentSolution.Equals(other.PaymentSolution)
                ) && 
                (
                    Batch == other.Batch ||
                    Batch != null &&
                    Batch.Equals(other.Batch)
                ) && 
                (
                    RecurringBilling == other.RecurringBilling ||
                    RecurringBilling != null &&
                    RecurringBilling.Equals(other.RecurringBilling)
                ) && 
                (
                    FollowUpAction == other.FollowUpAction ||
                    FollowUpAction != null &&
                    FollowUpAction.Equals(other.FollowUpAction)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Capture != null)
                    hashCode = hashCode * 59 + Capture.GetHashCode();
                    if (PaymentSolution != null)
                    hashCode = hashCode * 59 + PaymentSolution.GetHashCode();
                    if (Batch != null)
                    hashCode = hashCode * 59 + Batch.GetHashCode();
                    if (RecurringBilling != null)
                    hashCode = hashCode * 59 + RecurringBilling.GetHashCode();
                    if (FollowUpAction != null)
                    hashCode = hashCode * 59 + FollowUpAction.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProcessingInformation left, ProcessingInformation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProcessingInformation left, ProcessingInformation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
