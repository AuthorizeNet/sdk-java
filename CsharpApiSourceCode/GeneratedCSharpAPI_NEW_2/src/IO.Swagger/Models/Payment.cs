/*
 * Authorize.Net REST API
 *
 * Authorize.Net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// &#x60;Payment&#x60; is returned for a successful transaction. 
    /// </summary>
    [DataContract]
    public partial class Payment : IEquatable<Payment>
    { 
        /// <summary>
        /// Gets or Sets Links
        /// </summary>

        [DataMember(Name="_links")]
        public PaymentLinks Links { get; set; }

        /// <summary>
        /// Unique identifier for the transaction, generated by Authorize.Net. Reference this identifier in follow-up requests, such as a refund or GET request.
        /// </summary>
        /// <value>Unique identifier for the transaction, generated by Authorize.Net. Reference this identifier in follow-up requests, such as a refund or GET request.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Brief description of the status of the transaction. One of the folloiwng&amp;#58;    * &#x60;AUTHORIZED&#x60;    * &#x60;CAPTURED&#x60;    * &#x60;INTERNAL_ERROR&#x60;    * &#x60;REFUND_SETTLED&#x60;    * &#x60;REFUND_INITIATED&#x60;    * &#x60;approvedReview&#x60;    * &#x60;DECLINED&#x60;    * &#x60;FAILED&#x60;    * &#x60;EXPIRED&#x60;     * &#x60;failedReview&#x60;    * &#x60;SETTLED&#x60;    * &#x60;SETTLEMENT_ERROR&#x60;    * &#x60;PENDING_REVIEW&#x60;    * &#x60;VOIDED&#x60;    * &#x60;FDSPendingReview&#x60;    * &#x60;FDSAuthorizedPendingReview&#x60;    * &#x60;returnedItem&#x60; 
        /// </summary>
        /// <value>Brief description of the status of the transaction. One of the folloiwng&amp;#58;    * &#x60;AUTHORIZED&#x60;    * &#x60;CAPTURED&#x60;    * &#x60;INTERNAL_ERROR&#x60;    * &#x60;REFUND_SETTLED&#x60;    * &#x60;REFUND_INITIATED&#x60;    * &#x60;approvedReview&#x60;    * &#x60;DECLINED&#x60;    * &#x60;FAILED&#x60;    * &#x60;EXPIRED&#x60;     * &#x60;failedReview&#x60;    * &#x60;SETTLED&#x60;    * &#x60;SETTLEMENT_ERROR&#x60;    * &#x60;PENDING_REVIEW&#x60;    * &#x60;VOIDED&#x60;    * &#x60;FDSPendingReview&#x60;    * &#x60;FDSAuthorizedPendingReview&#x60;    * &#x60;returnedItem&#x60; </value>

        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets ClientReferenceInformation
        /// </summary>

        [DataMember(Name="clientReferenceInformation")]
        public ClientReferenceInformation ClientReferenceInformation { get; set; }

        /// <summary>
        /// Gets or Sets ProcessorInformation
        /// </summary>

        [DataMember(Name="processorInformation")]
        public ProcessorInformation ProcessorInformation { get; set; }

        /// <summary>
        /// The time that the transaction was submitted, in Coordinated Universal Time.
        /// </summary>
        /// <value>The time that the transaction was submitted, in Coordinated Universal Time.</value>

        [DataMember(Name="submitTimeUTC")]
        public string SubmitTimeUTC { get; set; }

        /// <summary>
        /// Gets or Sets OrderInformation
        /// </summary>

        [DataMember(Name="orderInformation")]
        public OrderInformation OrderInformation { get; set; }

        /// <summary>
        /// Gets or Sets PaymentInformation
        /// </summary>

        [DataMember(Name="paymentInformation")]
        public PaymentInformation PaymentInformation { get; set; }

        /// <summary>
        /// Gets or Sets FraudInformation
        /// </summary>

        [DataMember(Name="fraudInformation")]
        public FraudInformation FraudInformation { get; set; }

        /// <summary>
        /// Gets or Sets FollowUpResponse
        /// </summary>

        [DataMember(Name="followUpResponse")]
        public FollowUpResponse FollowUpResponse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Payment {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ClientReferenceInformation: ").Append(ClientReferenceInformation).Append("\n");
            sb.Append("  ProcessorInformation: ").Append(ProcessorInformation).Append("\n");
            sb.Append("  SubmitTimeUTC: ").Append(SubmitTimeUTC).Append("\n");
            sb.Append("  OrderInformation: ").Append(OrderInformation).Append("\n");
            sb.Append("  PaymentInformation: ").Append(PaymentInformation).Append("\n");
            sb.Append("  FraudInformation: ").Append(FraudInformation).Append("\n");
            sb.Append("  FollowUpResponse: ").Append(FollowUpResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Payment)obj);
        }

        /// <summary>
        /// Returns true if Payment instances are equal
        /// </summary>
        /// <param name="other">Instance of Payment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payment other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.Equals(other.Links)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    ClientReferenceInformation == other.ClientReferenceInformation ||
                    ClientReferenceInformation != null &&
                    ClientReferenceInformation.Equals(other.ClientReferenceInformation)
                ) && 
                (
                    ProcessorInformation == other.ProcessorInformation ||
                    ProcessorInformation != null &&
                    ProcessorInformation.Equals(other.ProcessorInformation)
                ) && 
                (
                    SubmitTimeUTC == other.SubmitTimeUTC ||
                    SubmitTimeUTC != null &&
                    SubmitTimeUTC.Equals(other.SubmitTimeUTC)
                ) && 
                (
                    OrderInformation == other.OrderInformation ||
                    OrderInformation != null &&
                    OrderInformation.Equals(other.OrderInformation)
                ) && 
                (
                    PaymentInformation == other.PaymentInformation ||
                    PaymentInformation != null &&
                    PaymentInformation.Equals(other.PaymentInformation)
                ) && 
                (
                    FraudInformation == other.FraudInformation ||
                    FraudInformation != null &&
                    FraudInformation.Equals(other.FraudInformation)
                ) && 
                (
                    FollowUpResponse == other.FollowUpResponse ||
                    FollowUpResponse != null &&
                    FollowUpResponse.Equals(other.FollowUpResponse)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (ClientReferenceInformation != null)
                    hashCode = hashCode * 59 + ClientReferenceInformation.GetHashCode();
                    if (ProcessorInformation != null)
                    hashCode = hashCode * 59 + ProcessorInformation.GetHashCode();
                    if (SubmitTimeUTC != null)
                    hashCode = hashCode * 59 + SubmitTimeUTC.GetHashCode();
                    if (OrderInformation != null)
                    hashCode = hashCode * 59 + OrderInformation.GetHashCode();
                    if (PaymentInformation != null)
                    hashCode = hashCode * 59 + PaymentInformation.GetHashCode();
                    if (FraudInformation != null)
                    hashCode = hashCode * 59 + FraudInformation.GetHashCode();
                    if (FollowUpResponse != null)
                    hashCode = hashCode * 59 + FollowUpResponse.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Payment left, Payment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Payment left, Payment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
